{"/home/travis/build/npmtest/node-npmtest-imdone/test.js":"/* istanbul instrument in package npmtest_imdone */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-imdone/lib.npmtest_imdone.js":"/* istanbul instrument in package npmtest_imdone */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_imdone = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_imdone = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-imdone/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-imdone && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_imdone */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_imdone\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_imdone.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_imdone.rollup.js'] =\n            local.assetsDict['/assets.npmtest_imdone.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_imdone.__dirname + '/lib.npmtest_imdone.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone/server/imdone.js":"/*\n * imdone\n * https://github.com/piascikj/imdone\n *\n * Copyright (c) 2012 Jesse Piascik\n * Licensed under the MIT license.\n */\n//ARCHIVE:450 Implement hide functionality to hide a list from board\n// Nodejs libs.\nvar fs               = require('fs');\nvar path             = require('path');\nvar events           = require('events');\nvar program          = require(\"commander\");\nvar wrench           = require('wrench');\nvar _                = require('lodash');\nvar marked           = require('marked');\nvar open             = require('open');\nvar request          = require('request');\nvar express          = require('express');\nvar bodyParser       = require('body-parser');\nvar cookieParser     = require('cookie-parser');\nvar http             = require('http');\nvar server           = require(\"./server\");\nvar Search           = require('imdone-core').Search;\nvar async            = require('async');\nvar Keen             = require('keen.io');\nvar tree             = require('./util/tree');\nvar log              = require('debug')('imdone:imdone');\nvar core             = require(\"imdone-core\");\nvar Repo             = require('imdone-core/lib/watched-repository');\nvar Project          = require('imdone-core/lib/fs-project');\nvar tools            = core.Tools;\nvar sanitize;\n\nvar imdone = module.exports = {pause:{}};\nvar pkginfo = require('pkginfo')(module);\nvar PROJECT_NOT_FOUND = imdone.PROJECT_NOT_FOUND = \"Project not found\";\nvar DIR_NOT_FOUND = imdone.DIR_NOT_FOUND = \"Directory not found\";\nvar keen = Keen.configure({\n              projectId: \"5550efecd2eaaa7efde1f138\",\n              writeKey: \"57032d04b2b29b693ef0e06aa3c7f295ead6daf33f51696b99dffdc1ad3e52898a22578b58a2f2138d370e626c497a93ecbb6629ec4dc6f7d4b34a64158121afeec493adef9a069b4385ead8861e852acd66489a049084e75dbb72e1cea5dfc0f584eac15dd91ca7a58c357656cb36eb\"\n            });\n\n_.templateSettings = {\n  interpolate: /\\{\\{(.+?)\\}\\}/g\n};\n\nimdone.config = {\n  port: process.env.IMDONE_PORT || 8080,\n  cliPort: process.env.IMDONE_CLI_PORT || 8899\n};\n\nimdone.projects = {};\n\nimdone.server = server;\n\n/*\n  `imdone` will add the current working directory to imdone projects and start imdone if not already up\n  `imdone stop` will stop imdone\n*/\nimdone.startFromCLI = function(dir) {\n  program\n  .usage(\"[options]\")\n  .version(imdone.version)\n  .option('-o, --open', 'Open imdone in the default browser')\n  .option('-s, --stop', 'Stop imdone server')\n  .option('-d, --dirs <directories>', 'A comma separated list of project directories', function list(val) {\n    return val.split(',');\n  });\n\n  program.on('--help', function(){\n    console.log('  Examples:');\n    console.log('');\n    console.log('    Open imdone in a browser with the current working directory as the project root');\n    console.log('');\n    console.log('    $ imdone -o');\n    console.log('');\n    console.log('    Open imdone in a browser with list of project directories');\n    console.log('');\n    console.log('    $ imdone -o -d projects/imdone,projects/myproject');\n  });\n\n  console.log(\"  _   __  __   _____                         \");\n  console.log(\" (_) |  \\\\/  | |  __ \\\\                        \");\n  console.log(\"  _  | \\\\  / | | |  | |   ___    _ __     ___ \");\n  console.log(\" | | | |\\\\/| | | |  | |  / _ \\\\  | '_ \\\\   / _ \\\\\");\n  console.log(\" | | | |  | | | |__| | | (_) | | | | | |  __/\");\n  console.log(\" |_| |_|  |_| |_____/   \\\\___/  |_| |_|  \\\\___|\");\n\n  program.parse(process.argv);\n\n  var dirs = _.map(program.dirs || [dir], function(dir) { return path.resolve(dir); } );\n  \n  if (program.stop) {\n    imdone.cliStop();\n  } else {\n    imdone.start(dirs, program.open);\n  }\n};\n\nimdone.isInitialized = function() {\n  return imdone.inititalized;\n};\n\nimdone.start = function(dirs, _open, noServer, cb) {\n  keen.addEvent(\"imdone started\", {\n    openCLI: _open ? true :false\n  }, function(err, result) {\n\n  });\n\n  if (_.isFunction(noServer)) {\n    cb = noServer;\n    noServer = null;\n  }\n  cb = _.isFunction(cb) ? cb : _.noop;\n\n  if (imdone.isInitialized()) return cb();\n  \n  // Merge dirs with dirs in config\n  dirs = _.union(imdone.getConfig().projects, dirs);\n\n  function init() {\n    // DONE:40 Should be able to start without server\n    if (!noServer) server.start(imdone);\n    var funcs = [];\n    _.each(dirs, function(d) {\n      funcs.push(function(cb) { imdone.addProject(d, cb); }); \n    });\n    async.parallel(funcs, function(err, result) {\n      log('All projects initialized');\n      if (_open) open('http://localhost:' + imdone.config.port);\n      imdone.initialized = true;\n      cb(err, result);\n    });\n  }\n\n  if (noServer) init();\n  else {\n    log('Begin initializing projects');\n    imdone.checkCLIService(function() {\n      console.log(\"iMDone service is already running!\");\n      if (_open) imdone.cliOpen();\n      cb();\n      _.each(dirs, function(d) {\n        imdone.cliAddProject(d);\n      });\n    }, function() {\n      imdone.startCLIService(function() {\n        init();\n      });\n    });\n\n  }\n};\n\n// PLANNING:80 Use axon-rpc for cli service and move to it's own module\nimdone.startCLIService = function(callback) {\n  //Start a service on 8899 for cli to interact with\n  //Access imdone data through getters and setters that require project path\n  var app = imdone.cliService = express();\n  var xserver = http.createServer(app);\n  app.use(cookieParser());\n  app.use(bodyParser());\n\n  //Start the api and static content server\n  app.get(\"/cli\", function(req, res) {\n    res.send({ok:imdone.up});\n  });\n  app.post(\"/cli/project\", function(req, res) {\n    imdone.addProject(req.body.cwd, function(err, project) {\n      res.send(project.getName());\n    });\n  });\n  app.delete(\"/cli/project\", function(req, res) {\n    res.send(imdone.removeProject(req.body.cwd));\n  });\n  app.post(\"/cli/stop\", function(req, res) {\n    res.send({ok:true});\n    process.exit();\n  });\n  app.post(\"/cli/open\", function(req, res) {\n    open('http://localhost:' + imdone.config.port);\n    res.send({ok:true});\n  });\n\n  xserver.on('listening', function() {\n    imdone.up = true;\n    if (callback) callback();\n  });\n  xserver.listen(imdone.config.cliPort);\n\n};\n\nimdone.cliOpen = function() {\n  request.post({\n    url:\"http://localhost:\" + imdone.config.cliPort + \"/cli/open\"\n  }, function(error, res, body) {\n    if (!res) {\n      console.log(\"failed to open browser\");\n    }\n  });\n\n};\n\nimdone.cliAddProject = function(dir) {\n  request.post({\n    url:\"http://localhost:\" + imdone.config.cliPort + \"/cli/project\",\n    json:{cwd:dir}\n  }, function(error, res, body) {\n    if (!res) {\n      console.log(\"failed to add project\");\n    } else {\n      console.log('Added project:', body);\n    }\n  });\n\n};\n\nimdone.cliRemoveProject = function(dir) {\n  request.delete({\n    url:\"http://localhost:\" + imdone.config.cliPort + \"/cli/project\",\n    json:{cwd:dir}\n  }, function(error, res, body) {\n    if (!res) {\n      console.log(\"failed to remove project\");\n    } else {\n      console.log('Removed project:', body.path);\n    }\n  });\n\n};\n\nimdone.cliStop = function() {\n  request.post({\n    url:\"http://localhost:\" + imdone.config.cliPort + \"/cli/stop\"\n  }, function(error, res, body) {\n    if (!res) {\n      console.log(\"failed to stop imdone service\");\n    } else {\n      console.log(\"imdone service has been stopped\");\n    }\n  });\n\n};\n\n\nimdone.checkCLIService = function(success, failure) {\n  request.get({\n    url:\"http://localhost:\" + imdone.config.cliPort + \"/cli\",\n  }, function(error, res, body) {\n    if (!res) {\n      failure();\n    } else {\n      success();\n    }\n  });\n};\n\nimdone.addProject = function(dir, cb) {\n  cb = _.isFunction(cb) ? cb : _.noop;\n  var name = dir.replace(/^([A-Za-z]:(\\\\)?|\\/?)/, \"\").split(path.sep).join(\"-\");\n  console.log(\"Adding project at:\" + dir);\n  if (imdone.projects[name]) delete imdone.projects[name];\n  if (!fs.existsSync(dir)) wrench.mkdirSyncRecursive(dir);\n  var repo = new Repo(dir);\n  var project = imdone.projects[name] = new Project(tools.user(), name, [repo]);\n  project.on('project.initialized', function(data) {\n    imdone.emitter.emit('project.initialized', data);\n  });\n  project.on('project.modified', function(data) {\n    imdone.emitter.emit('project.modified', data);\n  });\n  project.on('files.processed', function(data) {\n    imdone.emitter.emit('files.processed', data);\n  });\n  project.init(function(err) {\n    if (!err) imdone.addProjectToConfig(dir);\n    cb(err,project);\n  });\n};\n\nimdone.getConfigFile = function() {\n  var dir = path.join(tools.userHome(), '.imdone');\n  if (!fs.existsSync(dir)) wrench.mkdirSyncRecursive(dir);\n\n  var file = path.join(dir, 'config.json');\n  if (!fs.existsSync(file)) fs.writeFileSync(file, JSON.stringify({projects:[]}, null, 2));\n\n  return file;\n};\n\nimdone.getConfig = function() {\n  var json = fs.readFileSync(this.getConfigFile());\n  return JSON.parse(json);\n};\n\nimdone.addProjectToConfig = function(dir) {\n  var config = this.getConfig();\n  config.projects = _.without(config.projects, dir);\n  config.projects.push(dir);\n  fs.writeFileSync(this.getConfigFile(), JSON.stringify(config, null, 2));\n};\n\nimdone.removeProjectFromConfig = function(dir) {\n  var config = this.getConfig();\n  config.projects = _.without(config.projects, dir);\n  fs.writeFileSync(this.getConfigFile(), JSON.stringify(config, null, 2));\n};\n\n// PLANNING:40 Set a default project in config to be opened when iMDone starts\n\nimdone.removeProject = function(name) {\n  console.log(\"Removing project with name:\" + name);\n  var project = imdone.getProject(name);\n  if (project) {\n    if (project.isBusy()) throw new Error(\"Project Busy\");\n    var repo = imdone.getRepo(name);\n    this.removeProjectFromConfig(repo.getPath());\n    project.destroy();\n    delete imdone.projects[name];\n  }\n\n  imdone.emitter.emit(\"project.removed\", {project:name});\n};\n\nimdone.getProject = function(name) {\n  return imdone.projects[name] || undefined;\n};\n\nimdone.getKanban = function(name) {\n  var project = imdone.getProject(name);\n  if (project) {\n    if (project.isBusy()) throw new Error(\"Project Busy\");\n    return {\n      lists: project.getTasks(null, true),\n      readme: imdone.getRepo(project).getDefaultFile()\n    };\n  }\n};\n\nimdone.moveTasks = function(name, tasks, newList, newPos, cb) {\n  cb = _.isFunction(cb) ? cb : _.noop;\n  var project = imdone.getProject(name);\n  if (project) {\n    if (project.isBusy()) throw new Error(\"Project Busy\");\n    project.moveTasks(tasks, newList, newPos, cb);  \n  }\n};\n\nimdone.moveList = function(name, list, pos, cb) {\n  cb = _.isFunction(cb) ? cb : _.noop;\n  var project = imdone.getProject(name);\n  if (project) {\n    if (project.isBusy()) throw new Error(\"Project Busy\");\n    project.moveList(list, pos, cb);\n  }\n};\n\nimdone.removeList = function(name, list, cb) {\n  cb = _.isFunction(cb) ? cb : _.noop;\n  var project = imdone.getProject(name);\n  if (project) {\n    if (project.isBusy()) throw new Error(\"Project Busy\");\n    project.removeList(list, cb);\n  }\n};\n\nimdone.renameList = function(name, list, newList, cb) {\n  cb = _.isFunction(cb) ? cb : _.noop;\n  var project = imdone.getProject(name);\n  if (project) {\n    if (project.isBusy()) throw new Error(\"Project Busy\");\n    project.renameList(list, newList, cb);\n  } else cb(new Error(PROJECT_NOT_FOUND));\n};\n\nimdone.hideList = function(name, list, cb) {\n  cb = _.isFunction(cb) ? cb : _.noop;\n  var project = imdone.getProject(name);\n  if (project) {\n    if (project.isBusy()) throw new Error(\"Project Busy\");\n    project.hideList(list, cb);\n  } else cb(new Error(PROJECT_NOT_FOUND));\n};\n\nimdone.showList = function(name, list, cb) {\n  cb = _.isFunction(cb) ? cb : _.noop;\n  var project = imdone.getProject(name);\n  if (project) {\n    if (project.isBusy()) throw new Error(\"Project Busy\");\n    project.showList(list, cb);\n  } else cb(new Error(PROJECT_NOT_FOUND));\n};\n\n\nimdone.md = function(name, _path, cb) {\n  cb = _.isFunction(cb) ? cb : _.noop;\n  var project = imdone.getProject(name);\n  if (project) {\n    var repo = imdone.getRepo(project);\n    repo.md(repo.getFile(_path), cb);\n  } else return cb(\"Project is undefined\");\n};\n\nimdone.getFile = function(name, _path, line, cb) {\n  cb = _.isFunction(cb) ? cb : _.noop;\n  var project = imdone.getProject(name);\n  if (project) {\n    if (project.isBusy()) throw new Error(\"Project Busy\");\n    var repoId = imdone.getRepo(project).getId();\n    var file = project.getFileWithContent(repoId, _path);\n    if (file) {\n      cb(null, {\n          repoId: file.getRepoId(),\n          src:file.getContent(), \n          line:line,\n          lang:file.getLang().name,\n          ext:file.getExt(),\n          project:project.path,\n          path:file.getPath()\n      });\n    } else {\n      project.saveFile(repoId, _path, \"\", function(err, file) {\n        if (err) return cb(err);\n        cb(null,{\n          repoId: file.getRepoId(),\n          src:\"\", \n          line:line,\n          lang:file.getLang().name,\n          ext:file.getExt(),\n          project:project.path,\n          path:file.getPath()\n        });\n      });\n    }\n  } else cb(new Error(PROJECT_NOT_FOUND));\n};\n\nimdone.saveFile = function(name, repoId, _path, src, cb) {\n  cb = _.isFunction(cb) ? cb : _.noop;\n  var project = imdone.getProject(name);\n  if (project) {\n    if (project.isBusy()) throw new Error(\"Project Busy\");\n    project.saveFile(repoId, _path, src, cb);\n  } else cb(new Error(PROJECT_NOT_FOUND));\n};\n\nimdone.removeFile = function(name, _path, cb) {\n  cb = _.isFunction(cb) ? cb : _.noop;\n  var project = imdone.getProject(name);\n  if (project) {\n    if (project.isBusy()) throw new Error(\"Project Busy\");\n    var repoId = imdone.getRepo(project).getId();\n    project.deleteFile(repoId, _path, function(err, file) {\n      cb(err, {file:file, deleted:true});\n    });\n  } else cb(new Error(PROJECT_NOT_FOUND));\n};\n\nimdone.getFiles = function(name) {\n  var project = imdone.getProject(name);\n  var files;\n  if (project) {\n    return project.getFileTree(imdone.getRepo(project).getId());\n  } else throw new Error(PROJECT_NOT_FOUND);\n};\n\nimdone.getDirs = function(_path) {\n  var files = tree.getFiles(_path);\n  if (files) {\n    return files;\n  } else throw new Error(DIR_NOT_FOUND);\n};\n\nimdone.doSearch = function(name, query, offset, limit) {\n  var opts = {project:imdone.getProject(name)};\n  if (query) opts.query = query;\n  if (limit) opts.limit = limit;\n  if (offset) opts.offset = offset;\n  var s = new Search(opts);\n  s.execute();\n  return s;\n};\n\nimdone.addList = function(name, list, cb) {\n  cb = _.isFunction(cb) ? cb : _.noop;\n  var project = imdone.getProject(name);\n  project.addList(list, cb);\n};\n\nimdone.getRepo = function(name) {\n  if (name instanceof Project) return name.getRepos()[0];\n  return imdone.getProject(name).getRepos()[0];\n};\n\nimdone.getProjects = function() {\n  return _.keys(imdone.projects);\n};\n\nimdone.emitter = new events.EventEmitter();\n","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone/server/server.js":"/*\n * imdone\n * https://github.com/piascikj/imdone\n *\n * Copyright (c) 2012 Jesse Piascik\n * Licensed under the MIT license.\n */\n  // ARCHIVE:150 Upgrade express - [ExpressJS 4.0: New Features and Upgrading from 3.0 ♥ Scotch](http://scotch.io/bar-talk/expressjs-4-0-new-features-and-upgrading-from-3-0)\n  var express      = require('express');\n  var bodyParser   = require('body-parser');\n  var cookieParser = require('cookie-parser');\n  var http         = require('http');\n  var fs           = require('fs');\n  var _            = require('lodash');\n  var util         = require('util');\n  var io           = require('socket.io');\n  var path         = require('path');\n  var server       = module.exports;\n  var log          = require('debug')('imdone:server');\n  var EVENTS       = {\n                       PROJECT_MODIFIED: \"project.modified\",\n                       PROJECT_INITIALIZED: \"project.initialized\",\n                       PROJECT_REMOVED: \"project.removed\",\n                       FILES_PROCESSED: \"files.processed\"\n                     };\n  var BUSY_MSG     = \"Project Busy\";\n\n  function projectNameFromRequest(req) {\n    return req.body.project || req.query.project || req.params[0] || req.params.project;\n  }\n\n  function isBusy(req,res) {\n    var projectName = projectNameFromRequest(req);\n    var project = server.imdone.getProject(projectName);\n    return (project) ? project.isBusy() : undefined;\n  }\n\n  function getProjects(req, res) {\n      res.send(server.imdone.getProjects());\n  }\n\n  // ARCHIVE:200 use imdone-core\n  function getKanban(req, res){\n    var project = projectNameFromRequest(req);\n    try {\n      var kanban = server.imdone.getKanban(project);\n      if (kanban) return res.send(kanban);\n      return res.send(404);\n    } catch (e) {\n      if (e.message === BUSY_MSG) return res.send({busy:true});\n      res.send(500);\n    }\n  }\n\n  // ARCHIVE:210 use imdone-core\n  function moveTasks(req, res) {\n    try {\n      var project = projectNameFromRequest(req);    \n      var tasks = req.body.tasks;\n      var newList = req.body.newList;\n      var newPos = req.body.newPos;\n      server.imdone.moveTasks(project, tasks, newList, newPos, function() {\n        res.send(200);\n      });\n    } catch (e) {\n      if (e.message === BUSY_MSG) return res.send({busy:true});\n      res.send(500);\n    }\n  }\n\n  // ARCHIVE:220 use imdone-core\n  function moveList(req, res) {\n    try {\n      var project = projectNameFromRequest(req);    \n      var pos = parseInt(req.body.pos, 0);\n      var list = req.body.name;\n      server.imdone.moveList(project, list, pos, function(err) {\n        if (err) return res.send(500, err);\n        res.send(200);\n      });\n    } catch (e) {\n      if (e.message === BUSY_MSG) return res.send({busy:true});\n      res.send(500);\n    }\n  }\n\n  // ARCHIVE:230 use imdone-core\n  function removeList(req, res) {\n    try {\n      var project = projectNameFromRequest(req);    \n      var list = req.body.list;\n      server.imdone.removeList(project, list, function(err) {\n        if (err) return res.send(500, err);\n        res.send(200);\n      });\n    } catch (e) {\n      if (e.message === BUSY_MSG) return res.send({busy:true});\n      res.send(500);\n    }\n  }\n\n  // ARCHIVE:240 use imdone-core\n  function renameList(req, res) {\n    try {\n      var project = projectNameFromRequest(req);    \n      var name = req.body.name;\n      var newName = req.body.newName;\n      server.imdone.renameList(project, name, newName, function(err) {\n        if (err) return res.send(500, err);\n        res.send(200);\n      });\n    } catch (e) {\n      if (e.message === BUSY_MSG) return res.send({busy:true});\n      res.send(500);\n    }\n  }\n\n  // ARCHIVE:250 use imdone-core\n  function hideList(req, res) {\n    try {\n      var project = projectNameFromRequest(req);    \n      var list = req.body.list;\n      server.imdone.hideList(project, list, function(err) {\n        if (err) return res.send(500, err);\n        res.send(200);\n      });\n    } catch (e) {\n      if (e.message === BUSY_MSG) return res.send({busy:true});\n      res.send(500);\n    }\n  }\n\n  // ARCHIVE:260 use imdone-core\n  function showList(req, res) {\n    try {\n      var project = projectNameFromRequest(req);    \n      var list = req.body.list;\n      server.imdone.showList(project, list, function(err) {\n        if (err) return res.send(500, err);\n        res.send(200);\n      });\n    } catch (e) {\n      if (e.message === BUSY_MSG) return res.send({busy:true});\n      res.send(500);\n    }\n  }\n\n  // ARCHIVE:920 Have this use splat for project name like getFiles\n  // ARCHIVE:620 Move getSource to imdone.js\n  // ARCHIVE:270 use imdone-core\n  function getSource(req, res) {\n    try {\n      var project = projectNameFromRequest(req);    \n      var path = req.query.path;\n      var line = req.query.line;\n      server.imdone.getFile(project, path, line, function(err, data) {\n        if (err) return res.send(500, err);\n        res.send(data);\n      });\n    } catch (e) {\n      if (e.message === BUSY_MSG) return res.send({busy:true});\n      res.send(500);\n    }\n  }\n\n  // ARCHIVE:940 Have this use splat for project name like getFiles\n  // ARCHIVE:280 use imdone-core\n  function saveSource(req, res) {\n    try {\n      var project = projectNameFromRequest(req);    \n      var path = req.body.path;\n      var src = req.body.src;\n      var repoId = req.body.repoId;\n      server.imdone.saveFile(project, repoId, path, src, function(err, file) {\n        if (err) return res.send(500, err);\n        res.send(file);\n      });\n    } catch (e) {\n      if (e.message === BUSY_MSG) return res.send({busy:true});\n      res.send(500);\n    }\n  }\n\n  // ARCHIVE:870 Move removeSource to imdone.js and add hook    \n  // ARCHIVE:170 use imdone-core for removeSource\n  function removeSource(req, res) {\n    try {\n      var project = projectNameFromRequest(req);    \n      var path = req.query.path;\n      server.imdone.removeFile(project, path, function(err, file) {\n        if (err) return res.send(500, err);\n        res.send(file);\n      });\n    } catch (e) {\n      if (e.message === BUSY_MSG) return res.send({busy:true});\n      res.send(500);\n    }\n  }\n\n  // ARCHIVE:290 use imdone-core\n  function getFiles(req,res) {\n    try {\n      var project = projectNameFromRequest(req);    \n      var files;\n      res.send(server.imdone.getFiles(project));\n    } catch (e) {\n      if (e.message === BUSY_MSG) return res.send({busy:true});\n      if (e.message === server.imdone.PROJECT_NOT_FOUND) return res.send(404, server.imdone.PROJECT_NOT_FOUND);\n      res.send(500);\n    }\n  }\n\n  function getDirs(req,res) {\n    try {\n      res.send(server.imdone.getDirs(req.params[0]));\n    } catch (e) {\n      if (e.message === BUSY_MSG) return res.send({busy:true});\n      if (e.message === server.imdone.DIR_NOT_FOUND) return res.send(404, server.imdone.DIR_NOT_FOUND);\n      res.send(500);\n    }\n  }\n\n  // PLANNING:170 Use imdone-core for md, local and remote\n  function md(req,res) {\n    var project = projectNameFromRequest(req);\n    var _path = req.query.path;\n    server.imdone.md(project, _path, function(err, html) {\n      if (err) res.send(500);\n      else (res.send(html));\n    });\n  }\n\n  // ARCHIVE:300 use imdone-core for search\n  function doSearch(req,res) {\n    var project = projectNameFromRequest(req);\n    var query = req.query.query;\n    var limit = req.query.limit;\n    var offset = req.query.offset;\n    res.send(server.imdone.doSearch(project, query, offset, limit));\n  }\n\n  function addProject(req, res) {\n    var dir = req.params[0];\n    res.send(server.imdone.addProject(dir));\n  }\n\n  function removeProject(req, res) {\n    var project = projectNameFromRequest(req);\n    server.imdone.removeProject(project);\n    res.send(200);\n  }\n\n  function addList(req, res) {\n    var project = projectNameFromRequest(req);\n    var list = req.params.list;\n    server.imdone.addList(project, list, function(err) {\n      if (err) return res.send(500, err);\n      res.send(200);\n    });\n  }\n\n  server.start = function(imdone, callback) {\n    server.imdone = imdone;\n\n    //ARCHIVE:810 migrate to express 3.x <https://github.com/visionmedia/express/wiki/Migrating-from-2.x-to-3.x>\n    var app = server.app = express();\n    var  xserver = http.createServer(app);\n\n    app.use(cookieParser());\n    app.use(bodyParser());\n\n    //Start the api and static content server\n    /*\n      /api/tasks\n      /api/lists\n      /api/projects\n      /api/source\n      /api/files\n    */\n    // ARCHIVE:960 Make sure we're restful\n    app.post(\"/api/moveTasks\", moveTasks);\n    app.post(\"/api/moveList\", moveList);\n    app.post(\"/api/removeList\", removeList);\n    app.post(\"/api/renameList\", renameList);\n    app.post(\"/api/hideList\", hideList);\n    app.post(\"/api/showList\", showList);\n    app.get(\"/api/kanban/*\", getKanban);\n    app.post(\"/api/project/*\", addProject);\n    app.delete(\"/api/project/*\", removeProject);\n    app.get(\"/api/projects\", getProjects);\n    app.get(\"/api/source/*\", getSource);\n    app.put(\"/api/source/*\", saveSource);\n    app.del(\"/api/source/*\", removeSource);\n    app.get(\"/api/files/*\", getFiles);\n    app.get(\"/api/dirs/*\", getDirs);\n    app.get(\"/api/search/*\", doSearch);\n    app.get(\"/api/md/*\", md);\n    app.post(\"/api/list/:project/:list\", addList);\n\n    app.get(\"/js/marked.js\", function(req,res) {\n      log(require.resolve(\"marked\"));\n      res.sendfile(require.resolve(\"marked\").toString());\n    });\n\n    //Serve static files\n    app.use(express.static(__dirname + '/../public'));\n\n\n    //Start the websocket server\n    io = io.listen(xserver);\n\n    io.enable('browser client minification');  // send minified client\n    io.enable('browser client etag');          // apply etag caching logic based on version number\n    io.set('log level', 1);                    // reduce logging\n\n    io.sockets.on('connection', function(socket) {\n      log(\"connected to:\", socket);\n      var onProjectModified = function(data) {\n        log(\"emitting:\", EVENTS.PROJECT_MODIFIED);\n        socket.emit(EVENTS.PROJECT_MODIFIED, data);\n      };\n\n      var onProjectInitialized = function(data) {\n        log(\"emitting:\", EVENTS.PROJECT_INITIALIZED);\n        socket.emit(EVENTS.PROJECT_INITIALIZED, data);\n      };\n\n      var onProjectRemoved = function(data) {\n        log(\"emitting:\", EVENTS.PROJECT_REMOVED);\n        socket.emit(EVENTS.PROJECT_REMOVED, data);\n      };\n\n      var onFilesProcessed = function(data) {\n        log(\"emitting:\", EVENTS.FILES_PROCESSED);\n        socket.emit(EVENTS.FILES_PROCESSED, data);\n      };\n\n      server.imdone.emitter.on(EVENTS.PROJECT_INITIALIZED, onProjectInitialized);\n      server.imdone.emitter.on(EVENTS.PROJECT_REMOVED, onProjectRemoved);\n      server.imdone.emitter.on(EVENTS.PROJECT_MODIFIED, onProjectModified);\n      server.imdone.emitter.on(EVENTS.FILES_PROCESSED, onFilesProcessed);\n\n      // ARCHIVE:310 Remove listeners on disconnect\n      socket.on('disconnect', function () {\n        log('disconnected');\n        server.imdone.emitter.removeListener(EVENTS.PROJECT_INITIALIZED, onProjectInitialized);\n        server.imdone.emitter.removeListener(EVENTS.PROJECT_REMOVED, onProjectRemoved);\n        server.imdone.emitter.removeListener(EVENTS.PROJECT_MODIFIED, onProjectModified);\n        server.imdone.emitter.removeListener(EVENTS.FILES_PROCESSED, onFilesProcessed);\n      });\n    });    \n\n    if (callback) app.on('listening', callback);\n    xserver.listen(imdone.config.port);\n\n    //ARCHIVE:410 Move open board to command line option **open**\n  };\n  ","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone-core/index.js":"module.exports = require('./lib');","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone-core/lib/index.js":"module.exports = {\n  ProjectGroup: require('./project-group'),\n  Project: require('./project'),\n  Repository: require('./repository'),\n  File: require('./file'),\n  Task: require('./task'),\n  Search: require('./search'),\n  Tools: require('./tools')\n};","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone-core/lib/project-group.js":"'use strict';\n\nvar Project = require('./project');\n\n/**\n * Description\n * @method ProjectGroup\n * @param {} owner\n * @param {} name\n * @return \n */\nfunction ProjectGroup(owner, name) {\n  if (arguments.length < 2) throw new Error(\"owner and name are required\");\n\n  this.owner = owner;\n  this.name = name;\n  this.projects = [];\n}\n\n/**\n * Description\n * @method addProject\n * @param {} owner\n * @param {} name\n * @param {} repos\n * @return \n */\nProjectGroup.prototype.addProject = function(owner, name, repos) {\n  if (arguments.length < 3) {\n    owner = this.owner;\n    name = arguments[0];\n    repos = arguments[1];\n  }\n  \n  this.projects.push(new Project(owner, name, repos));\n};\n\nmodule.exports = ProjectGroup;","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone-core/lib/project.js":"'use strict';\n\nvar _      = require('lodash'),\n    log    = require('debug')('imdone-core:Project'),\n    events = require('events'),\n    async  = require('async'),\n    util   = require('util'),\n    path   = require('path'),\n    tools  = require('./tools'),\n    List   = require('./list'),\n    File   = require('./file'),\n    Config = require('./config'),\n    Task   = require('./task');\n\nvar ERRORS         = { NOT_A_TASK: \"task must be a Task\",\n                       LIST_NOT_FOUND: \"List with name '%s' does not exist\",\n                       REPO_NOT_FOUND: \"Repo %s not found\" },\n    CONFIG_DIR     = \".imdone\",\n    CONFIG_FILE    = \"config.json\",\n    DEFAULT_CONFIG = { lists: [] };\n\n/**\n * Description\n * @method Project\n * @param {} owner\n * @param {} name\n * @param {} repos\n * @return \n */\nfunction Project(owner, name, repos) {\n  events.EventEmitter.call(this);\n  this.configBase = process.env.IMDONE_CONFIG_DIR || tools.userHome();\n  this.owner = owner;\n  this.name = name;\n  this.repos = repos;\n  this.busy = false;\n  this.modifiedQ = [];\n  this.loadConfig();\n\n  this.createListeners();\n}\n\nProject.CONFIG_DIR = CONFIG_DIR;\nProject.CONFIG_FILE = CONFIG_FILE;\nProject.DEFAULT_CONFIG = DEFAULT_CONFIG;\n\nutil.inherits(Project, events.EventEmitter);\n\n/**\n * Description\n * @method toJSON\n * @return CallExpression\n */\nProject.prototype.toJSON = function() {\n  return _.omit(this, \n    [\"modifiedQ\", \n     \"modifiedInterval\", \n     \"_events\", \n     \"_maxListeners\", \n     \"domain\"]);\n};\n\n// [Need a way to run only one operation at a time on a project or repo. Use [kue](https://www.npmjs.org/package/kue)](#archive:60)\n// [Decide which listeners we should expose at the project level](#archive:110)\n// [We should have a destroy method](#archive:150)\n// emits project.modified, project.initialized, file.update, file.delete, file.processed\n/**\n * Description\n * @method init\n * @param {} cb\n * @return \n */\nProject.prototype.init = function(cb) {\n  var self = this, modifiedQ = [];\n  cb = this.callIfBusySetIfNot(cb); \n  if (!cb) return;\n  if (this.initialized) return cb();\n  this.initTime = new Date().getTime();\n\n  self.queueModified = function(data) {\n    modifiedQ.push(data);\n  };\n\n  var modifiedQSink = function() {\n    try {\n      var len = modifiedQ.length;\n      if (len > 0) {\n        var mods = [];\n        for (var i=0; i < len; i++) {\n          mods.push(modifiedQ.pop());\n        }\n        var data = {project:self.name, mods:mods};\n        self.emit('project.modified', data);\n      }\n\n    } catch (e) {\n      console.log(\"Error draining modifiedQ\", e);\n    }\n  };\n\n  self.modifiedInterval = setInterval(modifiedQSink, 500);\n\n  var funcs = _.map(this.getRepos(), function(repo) {\n    return function(cb) {\n      self.initRepo(repo, cb);\n    };\n  });\n\n  if (funcs.length === 0) return cb(\"Project has no Repos to initialize\");\n\n  async.parallel(funcs, function(err, results) {\n    self.storeLists(self.getProjectLists(), function() {\n      self.initialized = true;\n      cb(null);\n      self.emit('project.initialized', {project:self.getName()});\n    });\n  });\n};\n\nProject.prototype.destroy = function() {\n  if (this.modifiedInterval) clearInterval(this.modifiedInterval);\n  delete this.repos;\n};\n\n/**\n * Description\n * @method callIfBusySetIfNot\n * @param {} cb\n * @return FunctionExpression\n */\nProject.prototype.callIfBusySetIfNot = function(cb) {\n  cb = tools.cb(cb);\n  if (this.isBusy()) {\n    cb(\"Project is busy\");\n    return false;\n  }\n\n  this.busy = true;\n  var self = this;\n  \n  return  function() {\n    self.busy = false;\n    cb.apply(self,arguments);\n  };\n};\n\n/**\n * Description\n * @method createListeners\n * @return \n */\nProject.prototype.createListeners = function() {\n  var self = this;\n  \n  /**\n   * Description\n   * @method listFoundListener\n   * @param {} list\n   * @return \n   */\n  this.listFoundListener = function(list) {\n    if (list && !self.listExists(list.name)) {\n      self.storeLists(self.getProjectLists());\n    }\n  };\n\n  // [Add file.update and file.delete listener for repos and emit project.modified](#archive:80)\n  /**\n   * Description\n   * @method fileUpdateListener\n   * @param {} file\n   * @return \n   */\n  this.fileUpdateListener = function(file) {\n    // [fix emit modified by saving these up and emitting only if a backlog exists](#archive:120)\n    self.emit('file.update', {project:self.getName(), file:file});\n    self.queueModified({mod:'file.update', file:file.getPath()});\n  };\n\n  /**\n   * Description\n   * @method fileDeleteListener\n   * @param {} file\n   * @return \n   */\n  this.fileDeleteListener = function(file) {\n    self.emit('file.delete', {project:self.getName(), file:file});\n    self.queueModified({mod:'file.delete', file:file.getPath()});\n  };\n\n  /**\n   * Description\n   * @method fileProcessedListener\n   * @param {} data\n   * @return \n   */\n  this.fileProcessedListener = function(data) {\n    var now = (new Date()).getTime();\n    if (!self.lastFileProcessed) self.lastFileProcessed = now;\n    _.extend(data, {project:self.getName(), time:now});\n    self.emit('file.processed', data);\n    if (now-self.lastFileProcessed > 10) {\n      self.emit('files.processed', _.omit(data, [\"ok\", \"file\"]));\n      self.lastFileProcessed = now;\n    }\n  };\n\n};\n\n/**\n * Description\n * @method getConfigDir\n * @return CallExpression\n */\nProject.prototype.getConfigDir = function() {\n  return path.join(this.configBase, CONFIG_DIR, this.getName().replace(\" \", \"_\")); \n};\n\n/**\n * Description\n * @method getConfigFile\n * @return CallExpression\n */\nProject.prototype.getConfigFile = function() {\n  return path.join(this.getConfigDir(), CONFIG_FILE);\n};\n\n/**\n * Description\n * @method loadConfig\n * @return MemberExpression\n */\nProject.prototype.loadConfig = function() {\n  this.config = DEFAULT_CONFIG;\n};\n\n// [Use async file operations](#archive:70)\n// [Only save config if there is more than one repo](#archive:140)\n/**\n * Description\n * @method saveConfig\n * @param {} cb\n * @return \n */\nProject.prototype.saveConfig = function(cb) {\n  cb();\n};\n\n/**\n * Description\n * @method isBusy\n * @return BinaryExpression\n */\nProject.prototype.isBusy = function() {\n  return this.busy === true;\n};\n\n/**\n * Description\n * @method getConfig\n * @return MemberExpression\n */\nProject.prototype.getConfig = function() {\n  return this.config;\n};\n\n/**\n * Description\n * @method getOwner\n * @return MemberExpression\n */\nProject.prototype.getOwner = function() {\n  return this.owner;\n};\n\n/**\n * Description\n * @method getName\n * @return MemberExpression\n */\nProject.prototype.getName = function() {\n  return this.name;\n};\n\n/**\n * Description\n * @method getRepos\n * @return MemberExpression\n */\nProject.prototype.getRepos = function() {\n  return this.repos;\n};\n\n/**\n * Description\n * @method getRepo\n * @param {} id\n * @return CallExpression\n */\nProject.prototype.getRepo = function(id) {\n  return _.find(this.getRepos(), function(repo) {\n    return repo.getId() === id;\n  });\n};\n\n/**\n * Description\n * @method getRepoForFile\n * @param {} file\n * @return CallExpression\n */\nProject.prototype.getRepoForFile = function(file) {\n  return this.getRepo(file.getRepoId());\n};\n\n/**\n * Description\n * @method getRepoForTask\n * @param {} task\n * @return CallExpression\n */\nProject.prototype.getRepoForTask = function(task) {\n  return this.getRepo(task.getRepoId());\n};\n\n// [Implement addRepo and removeRepo](#archive:90)\n/**\n * Description\n * @method removeRepo\n * @param {} repoId\n * @return \n */\nProject.prototype.removeRepo = function(repoId) {\n  var repo = this.getRepo(repoId);\n  if (repo) {\n    this.repos = _.reject(this.repos, { id: repoId });\n    repo.destroy();\n  }\n};\n\n/**\n * Description\n * @method addRepo\n * @param {} repo\n * @param {} cb\n * @return \n */\nProject.prototype.addRepo = function(repo, cb) {\n  cb = tools.cb(cb);\n  var self = this;\n  if (this.getRepo(repo.getId()) === undefined) {\n    this.repos.push(repo);\n    this.initRepo(repo, function() {\n      self.storeLists(self.getProjectLists(), cb);\n      self.queueModified({mod:'repo.add', repoId:repo.getId()});\n    });\n  } else cb();\n};\n\n/**\n * Description\n * @method initRepo\n * @param {} repo\n * @param {} cb\n * @return \n */\nProject.prototype.initRepo = function(repo, cb) {\n  repo.project = this;\n\n  repo.removeListener('list.found', this.listFoundListener);\n  repo.on('list.found', this.listFoundListener);\n  \n  repo.removeListener('file.update', this.fileUpdateListener);\n  repo.on('file.update', this.fileUpdateListener);\n  \n  repo.removeListener('file.delete', this.fileDeleteListener);\n  repo.on('file.delete', this.fileDeleteListener);\n\n  repo.removeListener('file.processed', this.fileProcessedListener);\n  repo.on('file.processed', this.fileProcessedListener);\n\n  repo.init(cb); \n};\n\n/**\n * Description\n * @method storeLists\n * @param {} lists\n * @param {} cb\n * @return \n */\nProject.prototype.storeLists = function(lists, cb) {\n  var self = this;\n  cb = tools.cb(cb);\n  this.setLists(lists);\n  log(\"Storing lists:%s\", JSON.stringify(lists,null,5));\n  this.saveConfig(function() {\n    var funcs = _.map(self.getRepos(), function(repo) {\n      return function(cb) { \n        repo.setLists(lists);\n        repo.saveConfig(cb);\n      };\n    });\n\n    if (funcs.length > 0) {\n      async.parallel(funcs, cb);\n    } else cb();\n  });\n};\n\n/**\n * Description\n * @method getProjectLists\n * @return CallExpression\n */\nProject.prototype.getProjectLists = function() {\n  var self = this;\n  var allLists = [];\n  _.each(this.getRepos(), function(repo) {\n    var lists = repo.getLists();\n    allLists.push(lists);\n  });\n\n  if (allLists.length > 0) {\n    var combinedLists = _.uniq(_.flatten(allLists), 'name');\n\n    var listsLength = combinedLists.length;\n\n    if (listsLength > 0) {\n      this.setLists(_.sortBy(combinedLists, function(list) {\n        var index = _.findIndex(self.getLists(), {name: list.name});\n        return (index === -1) ? listsLength :index;\n      }));\n    }\n  }\n  return this.getLists();\n};\n\n/**\n * Description\n * @method sortLists\n * @param {} lists\n * @return lists\n */\nProject.prototype.sortLists = function(lists) {\n    var self        = this,\n        listsLength = lists.length;\n\n    if (listsLength > 0) {\n      lists = _.sortBy(lists, function(list) {\n        var index = _.findIndex(self.getLists(), {name: list.name});\n        return (index === -1) ? listsLength :index;\n      });\n    }\n\n    return lists;\n};\n\n/**\n * Description\n * @method getLists\n * @param {} repoId\n * @return MemberExpression\n */\nProject.prototype.getLists = function(repoId) {\n  if (repoId && this.getRepo(repoId)) return this.getRepo(repoId).getLists();\n  return this.getConfig().lists;\n};\n\n/**\n * Description\n * @method setLists\n * @param {} lists\n * @return ThisExpression\n */\nProject.prototype.setLists = function(lists) {\n  this.config.lists = _.map(lists, function(list) {\n    return new List(list.name, list.hidden);\n  });\n  return this;\n};\n\n/**\n * Description\n * @method listExists\n * @param {} name\n * @return BinaryExpression\n */\nProject.prototype.listExists = function(name) {\n  return (_.findIndex(this.getLists(), { name: name }) > -1);\n};\n\n/**\n * Description\n * @method moveList\n * @param {} name\n * @param {} pos\n * @param {} cb\n * @return \n */\nProject.prototype.moveList = function(name, pos, cb) {\n  var self = this;\n  cb = this.callIfBusySetIfNot(cb); if (!cb) return;\n  var lists = this.getLists();\n  var list = _.find(lists, {name:name});\n  if (list) {\n    lists = _.reject(lists, {name:name});\n    lists.splice(pos, 0, list);\n    this.storeLists(lists, function(err, result) {\n      if (!err) self.queueModified({mod:'list.move', list:{name:name, pos:pos}});\n      cb(err, result);\n    });\n  } else {\n    cb();\n  }\n  // [Fix all empty cb to return error](#archive:100)\n};\n\n/**\n * Description\n * @method renameList\n * @param {} oldName\n * @param {} newName\n * @param {} cb\n * @return \n */\nProject.prototype.renameList = function(oldName, newName, cb) {\n  cb = this.callIfBusySetIfNot(cb); if (!cb) return;\n  var self = this;\n  var lists = this.getLists();\n  // Find the index of the oldName\n  var oldNameIndex = _.findIndex(lists, {name: oldName});\n\n  // If newName exists, remove the oldName\n  if (_.findIndex(lists, {name: newName}) > -1) {\n    lists.splice(oldNameIndex, 1);\n  // Otherwise rename it\n  } else {\n    lists[oldNameIndex].name = newName;\n  }\n\n  this.setLists(lists);\n  var funcs = _.map(this.getRepos(), function(repo) {\n    return function(cb) { repo.renameList(oldName, newName, cb); };\n  });\n\n  if (funcs.length > 0) {\n    async.parallel(funcs, function(err, results) {\n      if (!err) self.queueModified({mod:\"list.rename\", list:{oldName:oldName, newName:newName}});\n      cb(err, results);\n    });\n  } else {\n    cb();\n  }\n};\n\n/**\n * Description\n * @method moveTask\n * @param {} project\n * @param {} task\n * @param {} newList\n * @param {} newPos\n * @return \n */\nfunction moveTask(project, task, newList, newPos) {\n  if (!Task.isTask(task)) task = new Task(task);\n  var toListTasks = project.getTasksInList(newList);\n\n  if (toListTasks === undefined) throw new Error(ERRORS.LIST_NOT_FOUND, newList);\n\n  var fromListTasks = project.getTasksInList(task.list);\n  if (fromListTasks === undefined) throw new Error(ERRORS.LIST_NOT_FOUND, task.list);\n\n  task.list = newList;\n\n  // Move the task to the correct position in the list\n  toListTasks = _.reject(toListTasks, function(_task) {\n    return  _task.equals(task);\n  });\n  toListTasks.splice(newPos,0,task);\n\n  // Modify the tasks in current list\n  _.each(toListTasks, function(_task, index) {\n    var repo = project.getRepoForTask(_task);\n    _task.order = index*10;\n    log(\"Task... text:%s list:%s order:%d path:%s id:%d\", _task.text, _task.list, _task.order, _task.source.path, _task.id);\n    repo.modifyTask(_task);\n  });\n\n  // Remove the task from the old list\n  if (newList !== task.list) {\n    fromListTasks = _.reject(fromListTasks, function(_task) {\n      return  _task.equals(task);\n    });\n  \n    _.each(fromListTasks, function(_task, index) {\n      var repo = project.getRepoForTask(_task);\n      _task.order = index*10;\n      repo.modifyTask(_task);\n    });\n  }\n}\n\n// [Test moveTasks](#archive:90)\n/**\n * Description\n * @method moveTasks\n * @param {} tasks\n * @param {} newList\n * @param {} newPos\n * @param {} cb\n * @return \n */\nProject.prototype.moveTasks = function(tasks, newList, newPos, cb) {\n  var self = this;\n  cb = this.callIfBusySetIfNot(cb); if (!cb) return;\n  _.each(tasks, function(task, i) {\n    log(\"Moving task to %d in %s\", newPos+i, newList);\n    moveTask(self, task, newList, newPos+i);\n  });\n\n  var filesToSave = [];\n  _.each(this.getRepos(), function(repo) {\n    _.each(repo.getFiles(), function(file) {\n      if (file.isModified()) filesToSave.push({file:file, repo:repo});\n    });\n  });\n\n  var funcs = _.map(filesToSave, function(fileToSave) {\n    return function(cb) { fileToSave.repo.writeFile(fileToSave.file, cb); };\n  });\n\n  if (funcs.length > 0) {\n    async.parallel(funcs, function(err, results) {\n      if (!err) {\n        var mods = _.map(filesToSave, \n                         function(obj) { \n                           return {path:obj.file.getPath(), repoId:obj.repo.getId()};\n                         });\n\n        self.queueModified({mod:'task.move', files:mods});\n      }\n      cb(err, results);\n    });\n  } else {\n    cb();\n  }\n};\n\n/**\n * Description\n * @method getTasks\n * @param {} repoId\n * @param {} excludeHiddenTasks\n * @return lists\n */\nProject.prototype.getTasks = function(repoId, excludeHiddenTasks) {\n  // clone the lists, so we don't modify them\n  var lists = _.map(this.getLists(), function(list) { return new List(list.name, list.hidden); });\n  var repos = (repoId && this.getRepo(repoId)) ? [this.getRepo(repoId)] : this.getRepos();\n  _.each(repos, function(repo) {\n    _.each(repo.getTasks(), function(task) {\n      var listName = task.getList();\n      var list = _.find(lists, {name:listName});\n      if (list === undefined) {\n        list = new List(listName);\n        lists.push(list);\n      }\n      log(\"adding task:%j\", task);\n      list.addTask(task);\n    });\n  });\n\n  _.each(lists, function(list) {\n    list.setTasks(_.sortBy(list.getTasks(), ['order', 'text']));\n  });\n\n  lists = this.sortLists(lists);\n\n  if (excludeHiddenTasks) {\n    lists = _.map(lists, function(list) {\n      if (list.hidden) delete list.tasks;\n      return list; \n    });\n  }\n\n  return lists;\n};\n\n/**\n * Description\n * @method getTasksInList\n * @param {} name\n * @return ConditionalExpression\n */\nProject.prototype.getTasksInList = function(name) {\n  var list = _.find(this.getTasks(), {name:name});\n  return (list && list.tasks.length > 0) ? list.tasks : [];\n};\n\n/**\n * Description\n * @method hideList\n * @param {} name\n * @param {} cb\n * @return \n */\nProject.prototype.hideList = function(name, cb) {\n  cb = tools.cb(cb);\n  var self = this;\n  var list = _.find(this.getLists(), {name:name});\n  if (list) {\n    list.hidden = true;\n    this.storeLists(this.getLists(), function() {\n      self.queueModified({mod:'list.hide', list:{name: name}});\n      cb();\n    });\n  } else cb(\"List does not exist.\");\n};\n\n/**\n * Description\n * @method showList\n * @param {} name\n * @param {} cb\n * @return \n */\nProject.prototype.showList = function(name, cb) {\n  cb = tools.cb(cb);\n  var self = this;\n  var list = _.find(this.getLists(), {name:name});\n  if (list) {\n    list.hidden = false;\n    this.storeLists(this.getLists(), function() {\n      self.queueModified({mod:'list.show', list:{name:name}});\n      cb();\n    });\n  } else cb(\"List does not exist.\");\n};\n\n// [User should be able to add a list to a project](#archive:50)\n/**\n * Description\n * @method addList\n * @param {} name\n * @param {} cb\n * @return \n */\nProject.prototype.addList = function(name, cb) {\n  cb = this.callIfBusySetIfNot(cb); if (!cb) return;\n  var self = this;\n  if (_.find(this.getConfig().lists)) return cb('A list with that name already exists');\n  this.getConfig().lists.push(new List(name, false));\n  this.storeLists(this.getLists(), function(err, result) {\n    self.queueModified({mod:'list.add', list:{name: name}});\n    cb(err, result);\n  });\n};\n\n/**\n * Description\n * @method removeList\n * @param {} name\n * @param {} cb\n * @return \n */\nProject.prototype.removeList = function(name, cb) {\n  cb = tools.cb(cb);\n  var self = this;\n  if (this.getTasksInList(name).length > 0) return cb(\"Can't remove a list with tasks!\"); \n  var list = _.find(this.getLists(), {name:name});\n  if (list) {\n    this.storeLists(_.reject(this.getLists(), {name:name}), function() {\n      self.queueModified({mod:'list.remove',list:{name:name}});\n      cb();\n    });\n  } else cb(\"List does not exist.\");\n};\n\n/**\n * Description\n * @method getFilesInPath\n * @param {} repoId\n * @param {} includeDirs\n * @return files\n */\nProject.prototype.getFilesInPath = function(repoId, includeDirs) {\n  if (typeof repoId === 'boolean') includeDirs = repoId; repoId = null;\n  if (repoId) return this.getRepo(repoId).getFilesInPath(includeDirs);\n  var files = [];\n  _.each(this.getRepos(), function(repo) {\n    _.each(repo.getFilesInPath(includeDirs), function(file) {\n      files.push(file);\n    });\n  });\n  return files;\n};\n\n// [getFilesTree should return a nested list of files](#archive:50)\n/**\n * Description\n * @method getFileTree\n * @param {} repoId\n * @return ConditionalExpression\n */\nProject.prototype.getFileTree = function(repoId) {\n  var repo = this.getRepo(repoId);\n  return repo ? repo.getFileTree() : undefined;\n};\n\n/**\n * Description\n * @method getFileWithContent\n * @param {} repoId\n * @param {} path\n * @return undefined\n */\nProject.prototype.getFileWithContent = function(repoId, path) {\n  var repo = this.getRepo(repoId);\n  if (repo) {\n    var file = repo.getFile(path);\n    if (file) return repo.readFileContentSync(file);\n  }\n  return undefined;\n};\n\n/**\n * Description\n * @method readFileContentSync\n * @param {} file\n * @return undefined\n */\nProject.prototype.readFileContentSync = function(file) {\n  var repo = this.getRepo(file.getRepoId());\n  if (repo) {\n    if (file) return repo.readFileContentSync(file);\n  }\n  return undefined;\n};\n\n/**\n * Description\n * @method saveFile\n * @param {} repoId\n * @param {} path\n * @param {} content\n * @param {} cb\n * @return \n */\nProject.prototype.saveFile = function(repoId, path, content, cb) {\n  var self = this;\n  cb = this.callIfBusySetIfNot(cb); if (!cb) return;\n  var repo = this.getRepo(repoId);\n  if (repo === undefined)  {\n    return cb(util.format(ERRORS.REPO_NOT_FOUND, repoId));\n  }\n  var file = new File(repoId, path, content);\n  repo.writeFile(file, function(err, file) {\n    cb(err, file);\n  });\n};\n\n/**\n * Description\n * @method deleteFile\n * @param {} repoId\n * @param {} path\n * @param {} cb\n * @return \n */\nProject.prototype.deleteFile = function(repoId, path, cb) {\n  var self = this;\n  cb = this.callIfBusySetIfNot(cb); if (!cb) return;\n  var repo = this.getRepo(repoId);\n  if (repo === undefined) return cb(util.format(ERRORS.REPO_NOT_FOUND, repoId));\n  repo.deleteFile(path, cb);  \n};\n\nmodule.exports = Project;\n","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone-core/lib/tools.js":"'use strict';\n\nvar _      = require('lodash'),\n    crypto = require('crypto'),\n    _path  = require('path');\n\nmodule.exports = {\n  /**\n   * Description\n   * @method userHome\n   * @return LogicalExpression\n   */\n  userHome: function() {\n    return process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;\n  },\n  \n  /**\n   * Description\n   * @method user\n   * @return LogicalExpression\n   */\n  user: function() {\n    return process.env.USER || process.env.USERNAME;\n  },\n\n  /**\n   * Description\n   * @method cb\n   * @param {} cb\n   * @return ConditionalExpression\n   */\n  cb: function(cb) {\n    return _.isFunction(cb) ? cb : _.noop;\n  },\n\n  /**\n   * Description\n   * @method sha\n   * @param {} data\n   * @return CallExpression\n   */\n  sha: function(data) {\n    var shasum = crypto.createHash('sha1');\n    shasum.update(data);\n    return shasum.digest('hex');\n  },\n\n  /**\n   * Description\n   * @method format\n   * @param {} template\n   * @param {} col\n   * @return CallExpression\n   */\n  format: function(template, col) {\n    col = typeof col === 'object' ? col : Array.prototype.slice.call(arguments, 2);\n\n    return template.replace(/\\{\\{|\\}\\}|\\{(\\w+)\\}/g, function (m, n) {\n        if (m == \"{{\") { return \"{\"; }\n        if (m == \"}}\") { return \"}\"; }\n        return col[n];\n    });\n  },\n\n  readdirSyncRecursive: function(fs, baseDir) {\n    baseDir = baseDir.replace(/\\/$/, '');\n\n    var readdirSyncRecursive = function(baseDir) {\n        var files = [],\n            curFiles,\n            nextDirs,\n            isDir = function(fname){\n                return fs.existsSync(_path.join(baseDir, fname)) ? fs.statSync( _path.join(baseDir, fname) ).isDirectory() : false;\n            },\n            prependBaseDir = function(fname){\n                return _path.join(baseDir, fname);\n            };\n\n        curFiles = fs.readdirSync(baseDir);\n        nextDirs = curFiles.filter(isDir);\n        curFiles = curFiles.map(prependBaseDir);\n\n        files = files.concat( curFiles );\n\n        while (nextDirs.length) {\n            files = files.concat( readdirSyncRecursive( _path.join(baseDir, nextDirs.shift()) ) );\n        }\n\n        return files;\n    };\n\n    // convert absolute paths to relative\n    var fileList = readdirSyncRecursive(baseDir).map(function(val){\n        return _path.relative(baseDir, val);\n    });\n\n    return fileList;\n  },\n\n  mkdirSyncRecursive: function(fs, path, mode) {\n    var self = this;\n    path = _path.normalize(path);\n\n    try {\n        fs.mkdirSync(path, mode);\n    } catch(err) {\n        if(err.code == \"ENOENT\") {\n            var slashIdx = path.lastIndexOf(_path.sep);\n\n            if(slashIdx > 0) {\n                var parentPath = path.substring(0, slashIdx);\n                this.mkdirSyncRecursive(parentPath, mode);\n                this.mkdirSyncRecursive(path, mode);\n            } else {\n                throw err;\n            }\n        } else if(err.code == \"EEXIST\") {\n            return;\n        } else {\n            throw err;\n        }\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone-core/lib/list.js":"'use strict';\n\n// TODO:40 Create list groups to show and hide for projects/repos\nvar _ = require('lodash');\n\n/**\n * Description\n * @method List\n * @param {} name\n * @param {} hidden\n * @return \n */\nfunction List(name, hidden) {\n  this.name = name;\n  this.hidden = hidden || false;\n  this.tasks = [];\n}\n\n/**\n * Description\n * @method isList\n * @param {} list\n * @return BinaryExpression\n */\nList.isList = function(list) {\n  return list instanceof List;\n};\n\n/**\n * Description\n * @method isHidden\n * @return MemberExpression\n */\nList.prototype.isHidden = function() {\n  return this.hidden;\n};\n\n/**\n * Description\n * @method getName\n * @return MemberExpression\n */\nList.prototype.getName = function() {\n  return this.name;\n};\n\n/**\n * Description\n * @method getTasks\n * @return MemberExpression\n */\nList.prototype.getTasks = function() {\n  return this.tasks;\n};\n\n/**\n * Description\n * @method addTask\n * @param {} task\n * @return \n */\nList.prototype.addTask = function(task) {\n  if (!_.find(this.tasks, function(_task) { _task.equals(task); })) {\n    this.tasks.push(task);\n  }\n};\n\n/**\n * Description\n * @method setTasks\n * @param {} tasks\n * @return \n */\nList.prototype.setTasks = function(tasks) {\n  this.tasks = tasks;\n};\n\n/**\n * Description\n * @method hasTasks\n * @return BinaryExpression\n */\nList.prototype.hasTasks = function() {\n  return this.tasks.length > 0; \n};\n\n/**\n * Description\n * @method toConfig\n * @return ObjectExpression\n */\nList.prototype.toConfig = function() {\n  var self = this;\n  return {name: self.name, hidden: self.hidden};\n};\n\nmodule.exports = List;","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone-core/lib/file.js":"'use strict';\n\nvar _         = require(\"lodash\"),\n    events    = require('events'),\n    util      = require('util'),\n    path      = require('path'),\n    languages = require('./languages'),\n    marked    = require('marked'),\n    tools     = require('./tools'),\n    log       = require('debug')('imdone-core:File'),    \n    Task      = require('./task');\n\nvar ERRORS = {\n  NOT_A_TASK: \"task must be of type Task\"\n};\n\nvar LINK_STYLE_REGEX = /\\[(.+?)\\]\\(#([\\w\\-]+?):(\\d+?\\.?\\d*?)\\)/g;\nvar CODE_BLOCK_REGEX = /`{3}[\\s\\S]*?`{3}/gm;\nvar INLINE_CODE_REGEX = /`[\\s\\S]*?`/g;\nvar CODE_STYLE_PATTERN = \"([A-Z]{2,}):?(\\\\d+?\\\\.?\\\\d*?)?\\\\s+(.*)$\";\nvar HASH_STYLE_REGEX = /#([\\w\\-]+?):(\\d+?\\.?\\d*?)\\s+(.*)/g;\n\nvar TASK_TYPE = {\n  CODE: 0,\n  LINK: 1,\n  HASH: 2\n};\n\nfunction escapeRegExp(value) {\n  return value.replace(/[\\/\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n}\n\n/**\n * Description\n * @method File\n * @param {} repoId\n * @param {} filePath\n * @param {} content\n * @param {} modifiedTime\n * @return \n */\nfunction File(repoId, filePath, content, modifiedTime) {\n  events.EventEmitter.call(this);\n  if (_.isObject(repoId)) {\n    _.assign(this, repoId);\n    _.each(this.tasks, function(task) {\n      task = new Task(task);\n    });\n  } else {\n    this.repoId = repoId;\n    this.path = filePath;\n    this.content = content;\n    this.modifiedTime = modifiedTime;\n    this.modified = false;\n    this.tasks = [];\n    this.isDir = false;\n  }\n}\n\nutil.inherits(File, events.EventEmitter);\n\n/**\n * Description\n * @method isFile\n * @param {} file\n * @return BinaryExpression\n */\nFile.isFile = function(file) {\n  return file instanceof File;\n};\n\n/**\n * Description\n * @method toJSON\n * @return CallExpression\n */\nFile.prototype.toJSON = function() {\n  return _.omit(this, [\"domain\", \"_events\", \"_maxListeners\"]);\n};\n\n/**\n * Description\n * @method getRepoId\n * @return MemberExpression\n */\nFile.prototype.getRepoId = function() {\n  return this.repoId;\n};\n\n/**\n * Description\n * @method getPath\n * @return MemberExpression\n */\nFile.prototype.getPath = function() {\n  return this.path;\n};\n\n/**\n * Description\n * @method getId\n * @return CallExpression\n */\nFile.prototype.getId = function() {\n  return this.getPath();\n};\n\n/**\n * Description\n * @method setContent\n * @param {} content\n * @return ThisExpression\n */\nFile.prototype.setContent = function(content) {\n  this.content = content;\n  return this;\n};\n\n/**\n * Description\n * @method getContent\n * @return MemberExpression\n */\nFile.prototype.getContent = function() {\n  return this.content;\n};\n\n/**\n * Description\n * @method setModifiedTime\n * @param {} modifiedTime\n * @return ThisExpression\n */\nFile.prototype.setModifiedTime = function(modifiedTime) {\n  this.modifiedTime = modifiedTime;\n  return this;\n};\n\n/**\n * Description\n * @method getModifiedTime\n * @return MemberExpression\n */\nFile.prototype.getModifiedTime = function() {\n  return this.modifiedTime;\n};\n\n/**\n * Description\n * @method setModified\n * @param {} modified\n * @return ThisExpression\n */\nFile.prototype.setModified = function(modified) {\n  this.modified = modified;\n  return this;\n};\n\n/**\n * Description\n * @method isModified\n * @return MemberExpression\n */\nFile.prototype.isModified = function() {\n  return this.modified;\n};\n\n/**\n * Description\n * @method getType\n * @return MemberExpression\n */\nFile.prototype.getType = function() {\n  return this.constructor.name;\n};\n\n/**\n * Description\n * @method getTasks\n * @return MemberExpression\n */\nFile.prototype.getTasks = function() {\n  return this.tasks;\n};\n\n/**\n * Description\n * @method getTask\n * @param {} id\n * @return MemberExpression\n */\nFile.prototype.getTask = function(id) {\n  return this.getTasks()[id];\n};\n\n/**\n * Description\n * @method addTask\n * @param {} task\n * @return MemberExpression\n */\nFile.prototype.addTask = function(task) {\n  if (!(task instanceof Task)) throw new Error(ERRORS.NOT_A_TASK);\n  if (!_.isArray(this.tasks)) this.tasks = [];\n  var index = _.findIndex(this.tasks, {id:task.id});\n  if (index > -1) {\n    this.tasks[index] = task;\n  } else {\n    this.tasks.push(task);\n  }\n  return this.tasks;    \n};\n\n/**\n * Description\n * @method isValidTask\n * @param {} data\n * @param {} pos\n * @return valid\n */\nFile.prototype.isValidTask = function(data, pos) {\n  var done = false, \n    beforeTask = \"\",\n    valid = false,\n    lang = this.getLang(),\n    symbol = lang.symbol,\n    symbolRegex = new RegExp(symbol);\n\n  log('checking for valid task with regex:%s', symbolRegex);\n\n  if (lang && symbol) {\n    for(var i=pos-1; !done; i--) {\n      beforeTask = data.substring(i,pos);\n      if (/\\n/.test(beforeTask)) {\n        done = true;\n      } else if (symbolRegex.test(beforeTask)) {\n        done = true;\n        valid = true;\n      }\n    }\n  } else {\n    valid = true;\n  }\n  \n  log('valid:%s', valid);\n  return valid;\n};\n\nfunction replacer(block) {\n  block = block.replace(new RegExp(LINK_STYLE_REGEX), \"**TASK**\");\n  block = block.replace(new RegExp(HASH_STYLE_REGEX), \"**TASK**\");\n  return block;\n}\n/**\n * Description\n * @method ignoreCode\n * @return cleanContent\n */\nFile.prototype.ignoreCode = function() {\n  var cleanContent = this.content;\n  if (this.isMarkDownFile()) {\n    cleanContent = this.content.replace(new RegExp(CODE_BLOCK_REGEX), replacer)\n                               .replace(new RegExp(INLINE_CODE_REGEX), replacer);\n  }\n  return cleanContent;\n};\n\n/**\n * Description\n * @method isMarkDownFile\n * @return LogicalExpression\n */\nFile.prototype.isMarkDownFile = function() {\n  var lang = this.getLang();\n  return (lang && (lang.name === \"markdown\"));\n};\n\n/**\n * Description\n * @method getLang\n * @return LogicalExpression\n */\nFile.prototype.getLang = function() {\n  var lang = languages[path.extname(this.path)];\n  return lang || {name:\"text\",symbol:\"\"};\n};\n\n/**\n * Description\n * @method getExt\n * @return CallExpression\n */\nFile.prototype.getExt = function() {\n  return path.extname(this.path).substring(1);\n};\n\n/**\n * Description\n * @method getCodeStyleRegex\n * @return \n */\nFile.prototype.getCodeStyleRegex = function() {\n  var symbol = this.getLang().symbol;\n  if (symbol && symbol !== \"\") {\n    symbol.replace(\"/\", \"\\\\/\");\n    var defactoPattern = \"^(.*\" + symbol + \"\\\\s*)\" + CODE_STYLE_PATTERN;\n    return new RegExp(defactoPattern, \"mg\");\n  }\n};\n\nFile.prototype.getTasksInCode = function(content, id, config) {\n  var self = this;\n  var extractor = function(match, start, list, order, text, pos) {\n    if (config && !config.includeList(list)) return;\n    log(\"Found a CODE_STYLE_PATTERN task: list:%s, order:%s, text:%s, pos:%d\", list, order, text, pos);\n    if ((text.toUpperCase() == text) || (text.replace(\" \", \"\") === \"\")) return;\n    order = (order === undefined) ? 0 : parseFloat(order);\n    var lb = content.substring(0,pos).match(/\\n/g);\n    var line = (lb||[]).length + 1;\n    var task = new Task({\n      codeStyle: true,\n      text:text,\n      html:marked(text),\n      list: list,\n      order: order,\n      line: line,\n      id: id,\n      repoId: self.getRepoId(),\n      source: self.getSource(),\n      type: Task.Types.CODE\n    });\n\n    self.addTask(task);\n    self.emit(\"task.found\", task);\n    id++;\n  };\n\n  // Look for single line comments\n  var codeStyleRegex = this.getCodeStyleRegex();\n  if (codeStyleRegex) content.replace(codeStyleRegex, extractor);\n\n  // [Now we need to look for multi-line comments](#archive:20)\n  if (this.getLang().block) {\n    var lang = this.getLang();\n    var block = lang.block;\n    var symbol = lang.symbol;\n    var start = escapeRegExp(block.start);\n    var end = escapeRegExp(block.end);\n    var ignore = escapeRegExp(block.ignore);\n    var regex = new RegExp(start + \"([\\\\s\\\\S]*?)\" + end, \"mg\");\n    log('Using RegExp %s to find block comments', regex.toString());\n    // var blockPattern = \"^([\\\\s|\" + start + \"|\" + ignore + \"]*?\" + CODE_STYLE_PATTERN;\n    var blockPattern = \"(.*?)\" + CODE_STYLE_PATTERN;\n    content.replace(regex, function(match, block, pos) {\n      log('Using RegExp %s to find tasks in %s', blockPattern.toString(), block);\n      block.replace(new RegExp(blockPattern, \"gm\"), function(match, start, list, order, text, posInBlock) {\n        extractor(match, start, list, order, text, pos+posInBlock+1);\n      });\n    });\n  }\n\n  return id;\n};\n\n// [Implement #listname style tasks in any text file](#archive:30)\n// [Allow code style tasks to be included on list name](#archive:10)\n/**\n * Description\n * @method extractTasks\n * @return ThisExpression\n */\nFile.prototype.extractTasks = function(config) {\n  var self = this;\n  var id = 0;\n  var clone = this.ignoreCode();\n  this.tasks = [];\n  // [Store task type in task , so we know how to remove the task later](#archive:0)\n  // Check for codestyle tasks\n  this.getTasksInCode(clone, id, config);\n\n  clone.replace(new RegExp(LINK_STYLE_REGEX), function(md, text, list, order, pos) {\n    log(\"Found a LINK_STYLE_REGEX task: list:%s, order:%s, text:%s, pos:%d\", list, order, text, pos);\n    if (self.isValidTask(clone, pos)) {\n      var lb = clone.substring(0,pos).match(/\\n/g);\n      var line = (lb||[]).length + 1;\n      var task = new Task({\n        text:text,\n        html:marked(text),\n        list: list,\n        order: parseFloat(order),\n        line: line,\n        id: id,\n        repoId: self.getRepoId(),\n        source: self.getSource(),\n        type: Task.Types.MARKDOWN\n      });\n\n      self.addTask(task);\n      self.emit(\"task.found\", task);\n      id++;\n    }\n  });\n\n  clone.replace(new RegExp(HASH_STYLE_REGEX), function(md, list, order, text, pos) {\n    log(\"Found a HASH_STYLE_REGEX task: list:%s, order:%s, text:%s, pos:%d\", list, order, text, pos);\n    if (self.isValidTask(clone, pos)) {\n      order = (order === undefined) ? 0 : parseFloat(order);\n      var lb = clone.substring(0,pos).match(/\\n/g);\n      var line = (lb||[]).length + 1;\n      var task = new Task({\n        text:text,\n        html:marked(text),\n        list: list,\n        order: parseFloat(order),\n        line: line,\n        id: id,\n        repoId: self.getRepoId(),\n        source: self.getSource(),\n        type: Task.Types.HASHTAG\n      });\n\n      self.addTask(task);\n      self.emit(\"task.found\", task);\n      id++;\n    }\n  });\n\n  this.emit(\"tasks\", this.tasks);\n  return this;\n};\n\n\n/**\n * Description\n * @method modifyTask\n * @param {} task\n * @return ThisExpression\n */\nFile.prototype.modifyTask = function(task, config) {\n  var self = this, n = 0, modified = false;\n  var codeStyleRegex = this.getCodeStyleRegex();\n\n  var codeCommentReplacer = function(match, start, list, order, text, pos) {\n    if (config && !config.includeList(list)) return match;\n    var newText = match;\n    if (n === task.id) {\n      log(\"Modifying task in code:%j\", task);\n      log(\"match: %s\", match);\n      // if the new list is not all upercase use md style\n      if (/[A-Z]+/.test(task.list)) {\n        newText = self.taskText(start, text, task.list, task.order, TASK_TYPE.CODE);\n      } else {\n        newText = self.taskText(start, text, task.list, task.order, TASK_TYPE.LINK);\n        delete task.codeStyle;\n      }\n      log(newText);\n      modified = true;\n    } \n    n++;\n    return newText;\n  };\n\n  if (codeStyleRegex) this.content = this.content.replace(codeStyleRegex, codeCommentReplacer); \n\n  if (this.getLang().block) {\n    var lang = this.getLang();\n    var block = lang.block;\n    var symbol = lang.symbol;\n    var start = escapeRegExp(block.start);\n    var end = escapeRegExp(block.end);\n    var ignore = escapeRegExp(block.ignore);\n    var regex = new RegExp(start + \"([\\\\s\\\\S]*?)\" + end, \"mg\");\n    var blockPattern = \"(.*?)\" + CODE_STYLE_PATTERN;\n    this.content = this.content.replace(regex, function(match, block) {\n      return match.replace(new RegExp(blockPattern, \"gm\"), codeCommentReplacer);\n    });\n  }\n  \n  this.content = this.content.replace(new RegExp(LINK_STYLE_REGEX), function(md, text, list, order, pos) {\n    if (!self.isValidTask(self.content, pos)) {\n      return md;\n    }\n\n    var newMD = md;\n    if (n === task.id) {\n      if (/[A-Z]+/.test(task.list) && codeStyleRegex) {\n        newMD = self.taskText(\"\", text, task.list, task.order, TASK_TYPE.CODE);\n        task.codeStyle = true;\n      } else {\n        newMD = self.taskText(\"\", text, task.list, task.order, TASK_TYPE.LINK);\n      }\n      modified = true;\n    } \n    n++;\n    return newMD;\n  });\n\n  this.content = this.content.replace(new RegExp(HASH_STYLE_REGEX), function(md, list, order, text, pos) {\n    if (!self.isValidTask(self.content, pos)) {\n      return md;\n    }\n\n    var newMD = md;\n    if (n === task.id) {\n      newMD = self.taskText(\"\", text, task.list, task.order, TASK_TYPE.HASH);\n      modified = true;\n    } \n    n++;\n    return newMD;\n  });\n\n  if (modified) {\n    this.setModified(true);\n    this.addTask(task);\n    self.emit(\"task.modified\", task);\n    self.emit(\"file.modified\", self);\n  }\n\n  return this;\n};\n\n/**\n * Description\n * @method taskText\n * @param {} start\n * @param {} text\n * @param {} list\n * @param {} order\n * @param Number TASK_TYPE\n * @return BinaryExpression\n */\nFile.prototype.taskText = function(start, text, list, order, type) {\n  if (type === TASK_TYPE.CODE) return start + list + \":\" + order + \" \" + text;\n  if (type === TASK_TYPE.LINK) return start + \"[\" + text + \"](#\" + list + \":\" + order + \")\";\n  if (type === TASK_TYPE.HASH) return start + \"#\" + list + \":\" + order + \" \" + text;\n};\n\n/**\n * Get html for markdown file\n * @method md\n * @param {} opts - The marked opts\n * @param Function cb\n */\n File.prototype.md = function(opts, cb) {\n  if (!this.getContent()) throw new Error(\"Load content with Repository.readFileContent or Repository.readFileContentSync\");\n  cb = tools.cb(cb);\n  var content = this.getContent().replace(new RegExp(HASH_STYLE_REGEX), function(md, list, order, text, pos) {\n    order = (order === undefined) ? \"0\" : order;\n    return util.format(\" [%s](#%s:%s)\", text, list, order);\n  });\n  marked(content, opts, cb);\n};\n\n/**\n * Description\n * @method getSource\n * @return ObjectExpression\n */\nFile.prototype.getSource = function() {\n  var self = this;\n  return {\n    path: self.getPath(),\n    id: self.getId(),\n    repoId: self.getRepoId(),\n    type: self.getType(),\n    ext: self.getExt(),\n    lang: self.getLang().name,\n    modified: self.isModified(),\n    modifiedTime: self.getModifiedTime()\n  };\n};\n\n\nmodule.exports = File;","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone-core/lib/languages.js":"'use strict';\n\nvar cBlock = {\"start\":\"/*\", \"end\":\"*/\", \"ignore\":\"*\"};\nmodule.exports = { \n  \".coffee\":      {\"name\": \"coffeescript\", \"symbol\": \"#\"},\n  \".litcoffee\":   {\"name\": \"coffeescript\", \"symbol\": \"#\", \"literate\": true},\n  \"Cakefile\":     {\"name\": \"coffeescript\", \"symbol\": \"#\"},\n  \".rb\":          {\"name\": \"ruby\", \"symbol\": \"#\"},\n  \".py\":          {\"name\": \"python\", \"symbol\": \"#\"},\n  \".tex\":         {\"name\": \"tex\", \"symbol\": \"%\"},\n  \".latex\":       {\"name\": \"tex\", \"symbol\": \"%\"},\n  \".js\":          {\"name\": \"javascript\", \"symbol\": \"//\", \"block\": cBlock},\n  \".java\":        {\"name\": \"java\", \"symbol\": \"//\", \"block\": cBlock},\n  \".scss\":        {\"name\": \"scss\", \"symbol\": \"//\"},\n  \".cpp\":         {\"name\": \"cpp\", \"symbol\": \"//\", \"block\": cBlock},\n  \".cc\":          {\"name\": \"cpp\", \"symbol\": \"//\", \"block\": cBlock},\n  \".php\":         {\"name\": \"php\", \"symbol\": \"//\"},\n  \".hs\":          {\"name\": \"haskell\", \"symbol\": \"--\"},\n  \".erl\":         {\"name\": \"erlang\", \"symbol\": \"%\"},\n  \".hrl\":         {\"name\": \"erlang\", \"symbol\": \"%\"},\n  \".md\":          {\"name\": \"markdown\", \"symbol\": \"\"},\n  \".markdown\":    {\"name\": \"markdown\", \"symbol\": \"\"},\n  \".less\":        {\"name\": \"scss\", \"symbol\": \"//\"},\n  \".c\":           {\"name\": \"c\", \"symbol\":\"//\", \"block\": cBlock},\n  \".h\":           {\"name\": \"objectivec\", \"symbol\": \"//\", \"block\": cBlock},\n  \".m\":           {\"name\": \"objectivec\", \"symbol\": \"//\", \"block\": cBlock},\n  \".mm\":          {\"name\": \"objectivec\", \"symbol\": \"//\", \"block\": cBlock},\n  \".m4\":          {\"name\": \"m4\", \"symbol\": \"#\"},\n  \".scala\":       {\"name\": \"scala\", \"symbol\": \"//\"},\n  \".cs\":          {\"name\": \"cs\", \"symbol\": \"//\"},\n  \".as\":          {\"name\": \"actionscript\", \"symbol\": \"//\"},\n  \".scpt\":        {\"name\": \"applescript\", \"symbol\": \"--\"},\n  \".applescript\": {\"name\": \"applescript\", \"symbol\": \"--\"},\n  \".sh\":          {\"name\": \"bash\", \"symbol\": \"#\"},\n  \".clj\":         {\"name\": \"clojure\", \"symbol\": \";\"},\n  \".cmake\":       {\"name\": \"cmake\", \"symbol\": \"#\"},\n  \".d\":           {\"name\": \"d\", \"symbol\": \"//\"},\n  \".p\":           {\"name\": \"delphi\", \"symbol\": \"//\"},\n  \".pp\":          {\"name\": \"delphi\", \"symbol\": \"//\"},\n  \".pas\":         {\"name\": \"delphi\", \"symbol\": \"//\"},\n  \".bat\":         {\"name\": \"dos\", \"symbol\": \"@?rem\"},\n  \".btm\":         {\"name\": \"dos\", \"symbol\": \"@?rem\"},\n  \".cmd\":         {\"name\": \"dos\", \"symbol\": \"@?rem\"},\n  \".go\":          {\"name\": \"go\", \"symbol\": \"//\", \"block\": cBlock},\n  \".ini\":         {\"name\": \"ini\", \"symbol\": \";\"},\n  \".lisp\":        {\"name\": \"lisp\", \"symbol\": \";\"},\n  \".mel\":         {\"name\": \"mel\", \"symbol\": \"//\"},\n  \".pl\":          {\"name\": \"perl\", \"symbol\": \"#\"},\n  \".pm\":          {\"name\": \"perl\", \"symbol\": \"#\"},\n  \".pod\":         {\"name\": \"perl\", \"symbol\": \"#\"},\n  \".t\":           {\"name\": \"perl\", \"symbol\": \"#\"},\n  \".r\":           {\"name\": \"r\", \"symbol\": \"#\"},\n  \".rc\":          {\"name\": \"rust\", \"symbol\": \"//\"},\n  \".rs\":          {\"name\": \"rust\", \"symbol\": \"//\"},\n  \".sql\":         {\"name\": \"sql\", \"symbol\": \"--\"},\n  \".vala\":        {\"name\": \"vala\", \"symbol\": \"//\"},\n  \".vapi\":        {\"name\": \"vala\", \"symbol\": \"//\"},\n  \".vbe\":         {\"name\": \"vbscript\", \"symbol\": \"'\"},\n  \".vbs\":         {\"name\": \"vbscript\", \"symbol\": \"'\"},\n  \".wsc\":         {\"name\": \"vbscript\", \"symbol\": \"'\"},\n  \".wsf\":         {\"name\": \"vbscript\", \"symbol\": \"'\"},\n  \".vhdl\":        {\"name\": \"vhdl\", \"symbol\": \"--\"},\n  \".bas\":         {\"name\": \"basic\", \"symbol\": \"REM\"}\n};\n","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone-core/lib/task.js":"'use strict';\n\nvar _ = require('lodash');\n\n/**\n * Description\n * @method Task\n * @param {} obj\n * @return \n */\nfunction Task(obj) {\n  if (!(_.isObject(obj))) throw new Error(\"obj must be an Object\");\n  this.codeStyle =  obj.codeStyle || false;\n  this.text = obj.text;\n  this.html = obj.html;\n  this.list = obj.list;\n  this.order = obj.order;\n  this.line = obj.line;\n  this.id = obj.id;\n  this.repoId = obj.repoId;\n  this.source = obj.source;\n  this.type = obj.type;\n}\n\nTask.Types = {\n  CODE: \"CODE\",\n  HASHTAG: \"HASHTAG\",\n  MARKDOWN: \"MARKDOWN\"\n};\n\n/**\n * Description\n * @method isTask\n * @param {} task\n * @return BinaryExpression\n */\nTask.isTask = function(task) {\n  return task instanceof Task;\n};\n\n/**\n * Description\n * @method getRepoId\n * @return MemberExpression\n */\nTask.prototype.getRepoId = function() {\n  return this.repoId;\n};\n\n/**\n * Description\n * @method getSource\n * @return MemberExpression\n */\nTask.prototype.getSource = function() {\n  return this.source;\n};\n\n/**\n * Description\n * @method getId\n * @return MemberExpression\n */\nTask.prototype.getId = function() {\n  return this.id;\n};\n\n/**\n * Description\n * @method getList\n * @return MemberExpression\n */\nTask.prototype.getList = function() {\n  return this.list;\n};\n\n/**\n * Description\n * @method getText\n * @return MemberExpression\n */\nTask.prototype.getText = function() {\n  return this.text;\n};\n\n/**\n * Description\n * @method getHtml\n * @return MemberExpression\n */\nTask.prototype.getHtml = function() {\n  return this.html;\n};\n\n/**\n * Description\n * @method order\n * @return MemberExpression\n */\nTask.prototype.order = function() {\n  return this.order;\n};\n\n/**\n * Description\n * @method getLine\n * @return MemberExpression\n */\nTask.prototype.getLine = function() {\n  return this.line;\n};\n\n/**\n * Description\n * @method isCodeStyle\n * @return MemberExpression\n */\nTask.prototype.isCodeStyle = function() {\n  return this.codeStyle;\n};\n\nTask.prototype.getType = function() {\n  return this.type;\n};\n\n/**\n * Description\n * @method equals\n * @param {} task\n * @return LogicalExpression\n */\nTask.prototype.equals = function(task) {\n  return task.getRepoId() == this.getRepoId() && \n         task.getSource().path == this.getSource().path &&\n         task.getId() == this.getId();\n};\n\nmodule.exports = Task;","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone-core/lib/config.js":"'use strict';\n\nvar _ = require('lodash');\n\n/**\n * Description\n * @method Config\n * @param {} opts\n * @return \n */\nfunction Config(opts) {\n  _.assign(this, opts);\n}\n\n/**\n * Description\n * @method toJSON\n * @return config\n */\nConfig.prototype.toJSON = function() {\n  var config = _.cloneDeep(this);\n  var self = this;\n  config.lists = _.map(config.lists, function(list) {\n    return _.omit(list, \"tasks\");\n  });\n\n  return config;\n};\n\nConfig.prototype.includeList = function(list) {\n  if (this.code && this.code.include_lists && this.code.include_lists.slice) {\n    return _.indexOf(this.code.include_lists, list) > -1;\n  }\n  return true;\n};\n\nmodule.exports = Config;","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone-core/lib/repository.js":"'use strict';\n\nvar _                = require('lodash'),\n    fs               = require('fs'),\n    events           = require('events'),\n    util             = require('util'),\n    async            = require('async'),\n    path             = require('path'),\n    marked           = require('marked'),\n    isBinaryFileSync = require('isbinaryfile'),\n    File             = require('./file'),\n    Config           = require('./config'),\n    tools            = require('./tools'),\n    log              = require('debug')('imdone-core:Repository'),\n    List             = require('./list');\n\nvar ERRORS                  = { NOT_A_FILE: \"file must be of type File\",\n                                CALLBACK_REQUIRED: \"Last paramter must be a callback function\" },\n    DEFAULT_FILE_PATTERN    = \"^(readme\\\\.md|home\\\\.md)$\",\n    DEFAULT_EXCLUDE_PATTERN = \"^(node_modules|bower_components|\\\\.imdone|target|build)[\\\\/\\\\\\\\]?|\\\\.(git|svn|hg|npmignore)|\\\\~$|\\\\.(jpg|png|gif|swp|ttf|otf)$\",\n    CONFIG_DIR              = \".imdone\",\n    CONFIG_FILE             = path.join(CONFIG_DIR,\"config.json\"),\n    DEFAULT_CONFIG          = { exclude: [DEFAULT_EXCLUDE_PATTERN],\n                                watcher: true,\n                                code: {\n                                  include_lists:[\"TODO\", \"DOING\", \"DONE\", \"PLANNING\", \"FIXME\", \"ARCHIVE\"]\n                                },\n                                lists: [],\n                                marked : { \n                                  gfm: true,\n                                  tables: true,\n                                  breaks: false,\n                                  pedantic: false,\n                                  sanitize: true,\n                                  smartLists: true,\n                                  langPrefix: 'language-' }\n                              };\n\n// Emits task.found, list.found, file.update and file.delete, file.processed\n/**\n * A Repository is a file system directory in which to look for tasks in files.  The Repository manages all the files\n * and lists in it's path.\n *\n * @constructor\n * @param {} path\n * @param {} config\n * @return \n */\nfunction Repository(path, config) {\n  if (!_.isString(path) || !fs.existsSync(path) || !fs.statSync(path).isDirectory())\n    throw new Error(\"Path must be an existing directory on the file system\");\n\n  events.EventEmitter.call(this);\n  // path is the root path of the repository\n  this.path = path;\n  this.files = [];\n  this.config = this.loadConfig() || config || {};\n  this.config = new Config(this.config);\n  this.plugins = {};\n  _.defaults(this.config, _.cloneDeep(DEFAULT_CONFIG));\n\n  this.initPlugins();\n  this.createListeners();\n}\n\nRepository.fs = function(_fs) {\n  fs = _fs;\n};\n\nRepository.isBinaryFileSync = function(_binCheck) {\n  isBinaryFileSync = _binCheck;\n};\n\nutil.inherits(Repository, events.EventEmitter);\n\n/**\n * Description\n * @method init\n * @param {} cb\n * @return \n */\nRepository.prototype.init = function(cb) {\n  var self = this;\n  cb = tools.cb(cb);\n  \n  marked.setOptions(this.config.marked);\n\n  this.readFiles(cb);\n};\n\n/**\n * Description\n * @method destroy\n * @return \n */\nRepository.prototype.destroy = function() {\n  this.path = null;\n  this.files = null;\n  this.config = null;\n  this.removeAllListeners();\n};\n\n/**\n * Initializes all plugins\n * @method initPlugins\n * @return \n */\nRepository.prototype.initPlugins = function() {\n  var self = this;\n  _.each(this.config.plugins, function(config, name) {\n    self.initPlugin(name, config); \n  });\n};\n\n/**\n * Initializes a single plugin\n * @method initPlugin\n * @return \n */\nRepository.prototype.initPlugin = function(name, config) {\n  var pluginPath, _path;\n  // First try to resolve the plugin in the paths node_modules\n  try {\n    _path = path.join(this.path, 'node_modules', name);\n    log('Looking for plugin:%s', _path);\n    require.resolve(_path);\n    pluginPath = _path;\n  } catch (e) {}\n\n  // Now check the users home node_modules\n  if (!pluginPath) {\n    try {\n      _path = path.join(tools.userHome(), 'node_modules', name);\n      log('Looking for plugin:%s', _path);\n      require.resolve(_path);\n      pluginPath = _path;\n    } catch (e) {}\n  }\n\n  // Now just try to load the module by name\n  if (!pluginPath) {\n    try {\n      log('Looking for plugin:%s', name);\n      require.resolve(name);\n      pluginPath = name;\n    } catch (e) {}\n  }\n\n  if (pluginPath) {\n    log('Found plugin:%s', pluginPath);\n    this.plugins[pluginPath] = require(pluginPath)(config, this);\n    try {\n      this.plugins[pluginPath]._pkg = require(pluginPath+'/package');\n    } catch (err) {\n      this.plugins[pluginPath]._pkg = {};\n    }\n  } \n};\n\n/**\n * Get a plugin by package name\n * @method plugin\n * @return The named plugin object or undefined\n */\nRepository.prototype.plugin = function(name) {\n  return this.plugins[name];\n};\n\n/**\n * Get all the plugins\n * @method getPlugins\n * @return The plugins hash\n */\nRepository.prototype.getPlugins = function() {\n  return this.plugins;\n};\n\n/**\n * Add a plugin\n * @method plugin\n * @return this for chaining\n */\nRepository.prototype.addPlugin = function(name, config) {\n  this.initPlugin(name, config);\n  if (this.config.plugins === undefined) this.config.plugins = {};\n  this.config.plugins[name] = config;\n};\n\n/**\n * Description\n * @method getId\n * @return CallExpression\n */\nRepository.prototype.getId = function() {\n  return this.getPath();\n};\n\nRepository.prototype.getProject = function() {\n  return this.project;\n};\n\n/**\n * Description\n * @method createListeners\n * @return \n */\nRepository.prototype.createListeners = function() {\n  var self = this;\n  /**\n   * Description\n   * @method taskFoundListener\n   * @param {} task\n   * @return \n   */\n  this.taskFoundListener = function(task) {\n    if (!self.listExists(task.list)) {\n      var list = _.pick(new List(task.getList()), \"name\", \"hidden\");\n      list = new List(list.name, list.hidden);\n      self.addList(list);\n      self.emit('list.found', list);\n      self.saveConfig();\n    }\n    self.emit('task.found', task);\n  };\n};\n\n\n/**\n * Description\n * @method addList\n * @param {} list\n * @return \n */\nRepository.prototype.addList = function(list) {\n  list = _.omit(list, \"tasks\");\n  this.config.lists.push(new List(list.name, list.hidden));\n};\n\n/**\n * Description\n * @method getPath\n * @return MemberExpression\n */\nRepository.prototype.getPath = function() {\n  return this.path;\n};\n\n/**\n * Description\n * @method getConfig\n * @return MemberExpression\n */\nRepository.prototype.getConfig = function() {\n  return this.config;\n};\n\n/**\n * Description\n * @method getLists\n * @return MemberExpression\n */\nRepository.prototype.getLists = function() {\n  return this.getConfig().lists;\n};\n\n/**\n * Description\n * @method setLists\n * @param {} lists\n * @return ThisExpression\n */\nRepository.prototype.setLists = function(lists) {\n  this.config.lists = _.map(lists, function(list) {\n    return new List(list.name, list.hidden);\n  });\n  return this;\n};\n\n/**\n * Description\n * @method listExists\n * @param {} name\n * @return BinaryExpression\n */\nRepository.prototype.listExists = function(name) {\n  return (_.findIndex(this.getLists(), { name: name }) > -1);\n};\n\n// [Make sure lists are not saved on load in alphabetical order](#archive:50)\n/**\n * Save the config file\n *\n * @method saveConfig\n * @param {} cb\n * @return \n */\nRepository.prototype.saveConfig = function(cb) {\n  cb = tools.cb(cb);\n  var self = this;\n  var dir = this.getFullPath(CONFIG_DIR);\n  var file = this.getFullPath(CONFIG_FILE);\n  fs.exists(dir, function(exists) {\n    var json = JSON.stringify(self.getConfig(), null, 2);\n    if (exists) {\n      fs.writeFile(file, json, cb);\n    } else {\n      fs.mkdir(dir, function(err) {\n        if (err) return cb(err);\n        fs.writeFile(file, json, cb);\n      });\n    }\n  });\n};\n\n/**\n * Load the config file\n *\n * @method loadConfig\n * @return MemberExpression\n */\nRepository.prototype.loadConfig = function() {\n  var file = this.getFullPath(CONFIG_FILE);\n  if (fs.existsSync(file)) {\n    var configLikeContent = fs.readFileSync(file);\n    try {\n      var configLike = JSON.parse(configLikeContent.toString());\n      this.config = new Config(configLike);\n    } catch (e) {\n      return undefined;\n    }\n  }\n  return this.config;\n};\n\n/**\n * Set the exclude patterns array in config\n *\n * @method setExcludePatterns\n * @param {} patterns\n * @return \n */\nRepository.prototype.setExcludePatterns = function(patterns) {\n  this.config.excludePatterns = patterns;\n};\n\n/**\n * Get the full path from a relative path\n *\n * @method getFullPath\n * @param {} file\n * @return String\n */\nRepository.prototype.getFullPath = function(file) {\n  if (File.isFile(file)) file = file.path;\n  return path.join(this.path,file);\n};\n\n/**\n * Get the relative path from repository root\n *\n * @method getRelativePath\n * @param {} fullPath\n * @return String\n */\nRepository.prototype.getRelativePath = function(fullPath) {\n  return path.relative(this.path, fullPath);\n};\n\n/**\n * Is this file OK?\n *\n * @method fileOK\n * @param {} file\n * @param {} includeDirs\n * @return stat\n */\nRepository.prototype.fileOK = function(file, includeDirs) {\n  if (File.isFile(file)) file = file.path;\n  if (this.shouldExclude(file)) return false;\n  var stat = false;\n  try {\n    stat = fs.lstatSync(this.getFullPath(file));\n    if ( /\\.\\.(\\/|\\\\)/.test(file) ||\n        (!includeDirs && !stat.isFile()) ||\n        (stat.isFile() && isBinaryFileSync(this.getFullPath(file))) ) stat = false;\n  } catch (e) {\n    stat = false;\n  }\n\n  return stat;\n};\n\n/**\n * Should the relative path be excluded.  Based on exludes regex patterns in config\n *\n * @method shouldExclude\n * @param {} relPath\n * @return exclude\n */\nRepository.prototype.shouldExclude = function(relPath) {\n  var exclude = false;\n  _.each(this.config.exclude, function(pattern) {\n    if ((new RegExp(pattern)).test(relPath)) {\n      exclude = true;\n      return false;\n    }\n  });\n  // log(\"Should we exclude:%s exclude:%s\", relPath, exclude);\n\n  return exclude;\n};\n\n/**\n * Add or replace a file in the files reference array\n *\n * @method addFile\n * @param {} file\n * @return MemberExpression\n */\nRepository.prototype.addFile = function(file) {\n  if (this.fileOK(file)) {\n    var index = _.findIndex(this.files, {path:file.path});\n    if (index > -1) {\n      this.files[index] = file;\n    } else {\n      this.files.push(file);\n    }\n  }\n  \n  return this.files;\n};\n\n/**\n * Remove a file from the files refrence array\n *\n * @method removeFile\n * @param {} file\n * @return MemberExpression\n */\nRepository.prototype.removeFile = function(file) {\n  if (!File.isFile(file)) throw new Error(ERRORS.NOT_A_FILE);\n  this.files = _.reject(this.files, {path:file.path});\n  this.emit(\"file.delete\", file);\n\n  return this.files;\n};\n\n/**\n * Description\n * @method getFile\n * @param {} path\n * @return CallExpression\n */\nRepository.prototype.getFile = function(path) {\n  return _.find(this.files, {path:path});\n};\n\n/**\n * Description\n * @method getFileForTask\n * @param {} task\n * @return CallExpression\n */\nRepository.prototype.getFileForTask = function(task) {\n  return this.getFile(task.getSource().path);\n};\n\n/**\n * Description\n * @method getFiles\n * @param {} paths\n * @return CallExpression\n */\nRepository.prototype.getFiles = function(paths) {\n  if (_.isUndefined(paths)) return _.sortBy(this.files, \"path\");\n  return _.filter(this.files, function(file) {\n    return (_.indexOf(paths, file.path) > -1);\n  });\n};\n\n/**\n * Description\n * @method extractTasks\n * @param {} file\n * @return \n */\nRepository.prototype.extractTasks = function(file) {\n  file.on('task.found', this.taskFoundListener);\n  if (file.content === null) this.readFileContentSync(file);\n  file.extractTasks(this.getConfig());\n  file.content = null;\n  file.removeListener('task.found', this.taskFoundListener);\n};\n\n/**\n * Description\n * @method writeFile\n * @param {} file\n * @param {} cb\n * @return \n */\nRepository.prototype.writeFile = function(file, cb) {\n  cb = tools.cb(cb);\n  if (!File.isFile(file)) return cb(new Error(ERRORS.NOT_A_FILE));\n  var self = this;\n  var filePath = this.getFullPath(file);\n\n  if (!/\\.\\.(\\/|\\\\)/.test(file.path)) {\n    // If dir does not exist create it\n    var dirName = path.dirname(filePath);\n    if (!fs.existsSync(dirName)) tools.mkdirSyncRecursive(fs, dirName);\n    //log(\"file:%s\", JSON.stringify(file, null, 5));\n    fs.writeFile(filePath, file.content, 'utf8', function(err, data) {\n      if (err) return cb(new Error(\"Unable to write file:\" + file.path), file);\n      file.setModifiedTime(fs.statSync(filePath).mtime);\n      file.modified = false;\n      self.extractTasks(file);\n      self.addFile(file);\n      self.emit(\"file.update\", file);\n\n      cb(null, file);\n    });\n  } else return cb(new Error(\"Unable to write file:\" + file.path), file);\n};\n\n/**\n * Description\n * @method getFilesInPath\n * @param {} includeDirs\n * @return CallExpression\n */\nRepository.prototype.getFilesInPath = function(includeDirs) {\n  var self = this;\n  var allPaths = tools.readdirSyncRecursive(fs, this.path);\n  var files = [];\n  _.each(allPaths, function(path, processed) {\n    if (files.length > 10000) throw new Error('Too many files in path');\n    var stat = self.fileOK(path, includeDirs);\n    self.emit(\"file.processed\", {file:path, ok:(stat !== false), total:allPaths.length, \n                                 processed:processed+1, repoId:self.getId()});\n\n    if (stat) {\n      var file = new File(self.getId(), path);\n      file.isDir = stat.isDirectory();\n      files.push(file);\n    }\n  });\n\n  return _.sortBy(files, \"path\");\n};\n\n/**\n * Description\n * @method getFileTree\n * @param {} _path\n * @return out\n */\nRepository.prototype.getFileTree = function(_path) {\n  var self = this,\n      out = {};\n\n  if (!_path) _path = this.path;\n  \n  log(\"Path:\", _path);\n  var files =  fs.readdirSync(_path);\n  log(\"raw files:\", files);\n  files = _.filter(_.map(files, function(file) { return path.join(_path, file); } ),\n            function(file) {\n              return self.fileOK(self.getRelativePath(file), true);\n            }\n          ).sort();\n\n  log(\"ok files:\", files);\n\n  _.each(files, function(file) {\n    log(file);\n    var name = path.basename(file);\n    var relPath = self.getRelativePath(file);\n    if (fs.statSync(file).isDirectory()) {\n      if(!out.dirs) out.dirs = [];\n      out.dirs.push(_.extend({name:name,path:relPath},self.getFileTree(file)));\n    } else {\n      if(!out.files) out.files = [];\n      out.files.push({name:name,path:relPath});\n    }\n  });\n  return out;\n};\n\n/**\n * Get html for md file\n * @method md\n * @param {} file\n * @param {} cb\n * @return String html \n */\nRepository.prototype.md = function(file, cb) {\n  cb = tools.cb(cb);\n  if (!File.isFile(file)) return cb(new Error(ERRORS.NOT_A_FILE));\n  if (!file.isMarkDownFile()) return cb(new Error(\"File is not markdown\"));\n  var self = this;\n  this.readFileContent(file, function(err, file) {\n    if (err) return cb(err);\n    file.md(self.getConfig().marked, cb);\n  });\n};\n\n/**\n * Description\n * @method readFileContent\n * @param {} file\n * @param {} cb\n * @return \n */\nRepository.prototype.readFileContent = function(file, cb) {\n  cb = tools.cb(cb);\n  if (!File.isFile(file)) return cb(new Error(ERRORS.NOT_A_FILE));\n  var self = this;\n  var filePath = this.getFullPath(file);\n\n  fs.readFile(filePath, 'utf8', function(err, data) {\n    if (err) return cb(new Error(\"Unable to read file:\" + file.path));\n    file.setContent(data).setModifiedTime(fs.statSync(filePath).mtime);\n    cb(null, file);\n  });\n};\n\n/**\n * Description\n * @method readFileContentSync\n * @param {} file\n * @return file\n */\nRepository.prototype.readFileContentSync = function(file) {\n  var self = this;\n  var filePath = this.getFullPath(file);\n\n  file.setContent(fs.readFileSync(filePath, 'utf8'))\n      .setModifiedTime(fs.statSync(filePath).mtime);\n\n  return file;\n};\n\n/**\n * Description\n * @method readFile\n * @param {} file\n * @param {} cb\n * @return \n */\nRepository.prototype.readFile = function(file, cb) {\n  cb = tools.cb(cb);\n  if (!File.isFile(file)) return cb(new Error(ERRORS.NOT_A_FILE));\n  var self = this;\n\n  if (!/\\.\\.(\\/|\\\\)/.test(file.path)) {\n    this.readFileContent(file, function(err, file) {\n      if (err) return cb(new Error(\"Unable to read file:\" + file.path));\n      self.extractTasks(file);\n      self.addFile(file);\n      cb(null, file);\n    });\n  } else return cb(new Error(\"Unable to read file:\" + file.path));\n};\n\n/**\n * Description\n * @method readFiles\n * @param {} files\n * @param {} cb\n * @return \n */\nRepository.prototype.readFiles = function(files, cb) {\n  if (arguments.length === 0) { cb = _.noop; files = undefined; }\n  else if (_.isFunction(files)) { cb = files; files = undefined; }\n  else {\n    if (files && !_.isArray(files)) throw new Error(\"files must be an array of files or undefined\");\n    if (!_.isFunction(cb)) throw new Error(\"callback must be a function\");\n  }\n\n  if (files === undefined) {\n    if (this.files && this.files.length > 0) { files = this.files; }\n    else { files = this.getFilesInPath(); this.files = files; }\n  }\n\n  var self = this;\n  var funcs = _.map(files, function(file) {\n    return function(cb) { \n      self.readFile(file, cb); \n    };\n  });\n\n  if (funcs.length > 0) async.parallel(funcs, cb);\n  else cb();\n};\n\n/**\n * Description\n * @method deleteFile\n * @param {} path\n * @param {} cb\n * @return \n */\nRepository.prototype.deleteFile = function(path, cb) {\n  cb = tools.cb(cb);\n  var file = this.getFile(path);\n  if (!_.isUndefined(file)) {\n    var self = this;\n    fs.unlink(this.getFullPath(file), function (err) {\n      if (err) return cb(\"Unable to delete:\" + path + \" : \" + err.toString());\n      self.removeFile(file);\n      cb(null, file);\n    });\n  } else cb(\"Unable to delete:\" + path);\n};\n\n/**\n * Description\n * @method hasDefaultFile\n * @return CallExpression\n */\nRepository.prototype.hasDefaultFile = function() {\n  return _.some(this.getFiles(), function(file) {\n    var regex = new RegExp(DEFAULT_FILE_PATTERN, \"i\");\n    return regex.test(file.path);\n  });\n};\n\n/**\n * Description\n * @method getDefaultFile\n * @return file\n */\nRepository.prototype.getDefaultFile = function() {\n  var files = _.sortBy(this.getFiles(), function(file) { return file.path; });\n  var file = _.find(files.reverse(), function(file) {\n    var regex = new RegExp(DEFAULT_FILE_PATTERN, \"i\");\n    return regex.test(file.path);\n  });\n  return file;\n};\n\n/**\n * Description\n * @method moveList\n * @param {} name\n * @param {} pos\n * @param {} cb\n * @return \n */\nRepository.prototype.moveList = function(name, pos, cb) {\n  cb = tools.cb(cb);\n  var lists = this.getLists();\n  var list = _.find(lists, {name:name});\n  // Only modify the lists if the list name exists\n  if (list) {\n    lists = _.remove(this.getLists(), {name:name});\n    lists.splice(pos, 0, list);\n    this.setLists(lists);\n    this.saveConfig(cb);\n  } else cb();\n};\n\n// [Test renameList](#archive:130)\n/**\n * Description\n * @method renameList\n * @param {} oldName\n * @param {} newName\n * @param {} cb\n * @return \n */\nRepository.prototype.renameList = function(oldName, newName, cb) {\n  cb = tools.cb(cb);\n  var self = this;\n  var lists = this.getLists();\n  // Find the index of the oldName\n  var oldNameIndex = _.findIndex(lists, {name: oldName});\n\n  // If newName exists, remove the oldName\n  if (_.findIndex(lists, {name: newName}) > -1) {\n    lists.splice(oldNameIndex, 1);\n  // Otherwise rename it\n  } else {\n    lists[oldNameIndex].name = newName;\n  }\n\n  this.setLists(lists);\n\n  // Modify the tasks\n  var files = [];\n  var tasksToModify = this.getTasksInList(oldName);\n  _.each(tasksToModify, function(task) {\n    var file = self.getFileForTask(task);\n    if (!_.find(files, {path: file.getPath()})) {\n      self.readFileContentSync(file);\n      files.push(file);\n    }\n    task.list = newName;\n    file.modifyTask(task, self.getConfig());\n  });\n\n  // Write the files\n  var funcs = _.map(files, function(file) {\n    return function(cb) {\n      self.writeFile(file, cb);\n    };\n  });\n\n  if (funcs.length > 0) {\n    async.parallel(funcs, cb);\n  } else cb();\n};\n\n// [modifyTask must be async.  Get file content before proceeding.](#archive:20)\n/**\n * Description\n * @method modifyTask\n * @param {} task\n * @return CallExpression\n */\nRepository.prototype.modifyTask = function(task) {\n  var file = this.getFileForTask(task);\n  if (!file.isModified()) this.readFileContentSync(file);\n  log(\"file:%s\", file.path);\n  log(\"content:%s\", file.content);\n  return file.modifyTask(task, this.getConfig());\n};\n\n/**\n * Description\n * @method getTasks\n * @return tasks\n */\nRepository.prototype.getTasks = function() {\n  var tasks = [],\n      self = this;\n  _.each(this.getFiles(), function(file) {\n    _.each(file.getTasks(), function(task) {\n      tasks.push(task);\n    });\n  });\n\n  return tasks;\n};\n\n/**\n * Description\n * @method getTasksInList\n * @param {} name\n * @return ConditionalExpression\n */\nRepository.prototype.getTasksInList = function(name) {\n  var tasks = this.getTasks();\n  return (tasks.length > 0) ? _.where(this.getTasks(), {list:name}) : [];\n};\n\nRepository.prototype.serialize = function() {\n  return JSON.stringify(this, null, 3);\n};\n\nRepository.deserialize = function(repo, cb) {\n  repo = JSON.parse(repo);\n  var newRepo = new Repository(repo.path, repo.config);\n  _.each(repo.files, function(file) {\n    newRepo.addFile(new File(file));\n  });\n  newRepo.readFiles(function() {\n    cb(newRepo);\n  });\n};\n\nmodule.exports = Repository;\n","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone-core/lib/search.js":"'use strict';\n\nvar _          = require('lodash'),\n    Project    = require('./project'),\n    Repository = require('./repository');\n\nvar MISSING_PROJECT = 'project is a required option and must be a Repository or Project object',\n    MISSING_QUERY   = 'query is a required option';\n/**\n * opts : {\n * project: a Project or Repository object\n * query: a regular expression query\n * offset: The offset\n * limit: max results to return\n * }\n * @method Search\n * @param {} opts\n * @return \n */\nvar Search = function(opts) {\n  opts = _.extend({\n    offset:0,\n    limit: 200\n  }, opts || {});\n\n  if ( !opts.project || \n       ( !(opts.project instanceof Project) &&\n         !(opts.project instanceof Repository) ) ) throw new Error(MISSING_PROJECT);\n\n  if (!opts.query) throw new Error(MISSING_QUERY);\n\n  opts.re = new RegExp('(' + opts.query + ')', 'i');\n  this.opts = opts;\n  this.result = [];\n  this.hits = 0;\n  this.total = 0;\n  this.filesSearched = 0;\n  this.filesNotSearched = 0;\n};\n\n/**\n * Description\n * @method execute\n * @return MemberExpression\n */\nSearch.prototype.execute = function() {\n  this.find(this.opts.project);\n  return this.result;\n};\n\n/**\n * Description\n * @method find\n * @return \n */\nSearch.prototype.find = function() {\n  var self = this, project = this.opts.project;\n\n  project.getFilesInPath().forEach(function(file) {\n\n    if (self.total >= self.opts.limit) {\n      self.filesNotSearched++;\n      return;\n    }\n\n    self.filesSearched++;\n\n    var lines = [];\n    var str = project.readFileContentSync(file).getContent();\n    file = file.getSource();\n    str.split('\\n').forEach(function(line, i){\n      var pos = line.search(self.opts.re);\n      if (pos > -1) {\n        if (line.length > 120) {\n          if (pos > 120) {\n            var truncated = line.substring(pos-60, pos+60);\n            if (truncated.length < 120) {\n              truncated = line.substring(line.length-120);\n              line = \"... \" + truncated;\n            } else {\n              line = \"... \" + truncated + \" ...\";\n            }\n          } else {\n            line = line.substring(0,120) + \"...\";\n          }\n        }\n        lines.push([i+1, line]);\n      }\n    });\n\n    if (lines.length > 0) {\n      var fileResult = {file:file, lines:[]};\n      lines.forEach(function(line){\n        self.hits++;\n        if ((self.hits > self.opts.offset) && (self.total < self.opts.limit)) {\n          fileResult.lines.push({line:line[0], text:line[1]});\n          self.total++;\n        }\n      });\n      if (fileResult.lines.length > 0) self.result.push(fileResult);\n    }\n\n  });\n};\n\n/**\n * Description\n * @method toJSON\n * @return ObjectExpression\n */\nSearch.prototype.toJSON = function() {\n  var self = this;\n  return {\n    opts: {\n      project: self.opts.project.name,\n      query: self.opts.query,\n      offset: self.opts.offset,\n      limit: self.opts.limit\n    },\n    hits: self.hits,\n    total: self.total,\n    filesSearched: self.filesSearched,\n    filesNotSearched: self.filesNotSearched,\n    result: self.result\n  };\n};\n\nmodule.exports = Search;","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone/server/util/tree.js":"var path  = require('path'),\n    _     = require('lodash'),\n    fs    = require('fs'),\n    log   = require('debug')('tree'),\n    tools = require('imdone-core').Tools;\n\nfunction getFiles(_path) {\n  if (!_path) _path = tools.userHome();\n  \n  log(\"Path:\", _path);\n  var files =  fs.readdirSync(_path);\n  log(\"raw files:\", files);\n  files = _.map(files, function(file) { return path.join(_path, file); } ).sort();\n\n  var up = path.resolve(_path + path.sep + '..' + path.sep);\n  var name = path.basename(_path);\n  var hidden = /^\\./.test(name);\n  var out = { path:_path, name: name, hidden: hidden, up: up};\n\n  _.each(files, function(file) {\n    log(file);\n    var name = path.basename(file);\n    var hidden = /^\\./.test(name);\n    if (fs.statSync(file).isDirectory()) {\n      if(!out.dirs) out.dirs = [];\n      out.dirs.push({name:name, hidden:hidden, path:file});\n    } else {\n      if(!out.files) out.files = [];\n      out.files.push({name:name, hidden:hidden, path:file});\n    }\n  });\n  return out;\n}\n\nmodule.exports = {\n  getFiles: getFiles\n};","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone-core/lib/watched-repository.js":"'use strict';\n\nvar _                = require('lodash'),\n    fs               = require('fs'),\n    events           = require('events'),\n    util             = require('util'),\n    File             = require('./file'),\n    tools            = require('./tools'),\n    Repository       = require('./repository'),\n    log              = require('debug')('imdone-core:Watched-Repository');\n\n// Emits task.found, list.found, file.update and file.delete, file.processed\n/**\n * A Repository is a file system directory in which to look for tasks in files.  The Repository manages all the files\n * and lists in it's path.\n *\n * @constructor\n * @param {} path\n * @param {} config\n * @return \n */\nfunction WatchedRepository(path, config) {\n  Repository.call(this, path, config);\n}\n\nutil.inherits(WatchedRepository, events.EventEmitter);\nutil.inherits(WatchedRepository, Repository);\n\n/**\n * Description\n * @method init\n * @param {} cb\n * @return \n */\nWatchedRepository.prototype.init = function(cb) {\n  var self = this;\n  cb = tools.cb(cb);\n\n  WatchedRepository.super_.prototype.init.call(this, function(err, files) {\n    if (self.config.watcher) { self.initWatcher(); }\n    self.emit('initialized', {ok:true});\n    log('initialized');\n    cb(err,files);\n  });  \n};\n\n/**\n * Description\n * @method destroy\n * @return \n */\nWatchedRepository.prototype.destroy = function() {\n  if (this.watcher) this.watcher.close();\n  WatchedRepository.super_.prototype.destroy.apply(this);\n};\n\n/**\n * Description\n * @method initWatcher\n * @return \n */\nWatchedRepository.prototype.initWatcher = function() {\n  var self = this;\n  log(\"Creating a new watcher\");\n  this.watcher = require('chokidar').watch(self.path, {\n    /**\n     * Description\n     * @method ignored\n     * @param {} path\n     * @return exclude\n     */\n    ignored: function(path) {\n      var relPath = self.getRelativePath(path);\n      var exclude = self.shouldExclude(relPath);\n      return exclude;\n    }, \n    persistent: true\n  });\n  \n  this.watcher\n  .on('add', function(path) {\n    log(\"Watcher received add event for file: \" + path);\n    var relPath = self.getRelativePath(path);\n    var file = self.getFile(relPath);\n    if (file === undefined) {\n      file = new File(self.getId(), relPath);\n    } else if (fs.statSync(path).mtime <= file.getModifiedTime()) return;\n    \n    if (self.fileOK(file)) {\n      log(\"Reading file: \" + path);\n      self.readFile(file, function (err, file) {\n        self.emit(\"file.update\", file);\n      });\n    }\n  })\n  .on('addDir', function(path) {log('Directory', path, 'has been added');})\n  .on('change', function(path) {\n    log(\"Watcher received change event for file: \" + path);\n    var file = self.getFile(self.getRelativePath(path));\n    if (self.fileOK(file)) {\n      log(\"Reading file: \" + path);\n      self.readFile(file, function (err, file) {\n        self.emit(\"file.update\", file);\n      });\n    }\n  })\n  .on('unlink', function(path) {\n    log(\"Watcher received unlink event for file: \" + path);\n    var file = new File(self.getId(), self.getRelativePath(path));\n    log(\"Removing file: \" + path);\n    self.removeFile(file);\n  })\n  .on('unlinkDir', function(path) {log('Directory', path, 'has been removed');})\n  .on('error', function(error) {console.error('Error while watching files:', error);});\n\n};\n\nmodule.exports = WatchedRepository;\n","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone-core/lib/fs-project.js":"'use strict';\n\nvar _      = require('lodash'),\n    events = require('events'),\n    fs     = require('fs'),\n    async  = require('async'),\n    util   = require('util'),\n    tools  = require('./tools'),\n    Config = require('./config'),\n    Project = require('./project');\n\nvar DEFAULT_CONFIG = { lists: [] };\n\n/**\n * Description\n * @method Project\n * @param {} owner\n * @param {} name\n * @param {} repos\n * @return \n */\nfunction FSProject(owner, name, repos) {\n  Project.call(this, owner, name, repos);\n  \n  if (!fs.existsSync(this.configBase) || !fs.statSync(this.configBase).isDirectory())\n    throw new Error(\"IMDONE_CONFIG_DIR must be an existing directory on the file system\");\n}\n\nutil.inherits(FSProject, Project);\n\nFSProject.prototype.loadConfig = function() {\n  var file = this.getConfigFile();\n  var configLike = {};\n  if (fs.existsSync(file)) {\n    var configLikeContent = fs.readFileSync(file);\n    try {\n      configLike = JSON.parse(configLikeContent.toString());\n    } catch (e) {}\n  }\n\n  _.defaults(configLike, _.cloneDeep(DEFAULT_CONFIG));\n  this.config = new Config(configLike);\n\n  return this.config;\n};\n\nFSProject.prototype.saveConfig = function(cb) {\n  var self = this;\n  if (cb === undefined) cb = _.noop;\n  // Only store config if there is more than one Repo\n  if (this.getRepos().length === 1) return cb();\n  var dir = this.getConfigDir();\n  var file = this.getConfigFile();\n  \n  fs.exists(dir, function(exists) {\n    try {\n      if (!exists) {\n        tools.mkdirSyncRecursive(fs, dir);\n      }\n      fs.writeFile(file, JSON.stringify(self.getConfig(), null, 2), cb);\n    } catch(e) {\n      console.log(\"Error saving config \" + file);\n      cb();\n    }\n  });\n};\n\nmodule.exports = FSProject;\n","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone/bin/imdone.js":"#!/usr/bin/env node\n\n// Nodejs libs.\nvar fs = require('fs');\nvar path = require('path');\n\n//Got this badass lib from grunt\nvar findup = require('../server/util/findup');\n\n// Where might a locally-installed imdone live?\nvar dir = findup(process.cwd(), 'imdone.js');\ndir = path.resolve(dir || '.', '../node_modules/imdone');\n\n// If imdone is installed locally, use it. Otherwise use this imdone.\nif (!fs.existsSync(dir)) { dir = '../server/imdone'; }\n\n// Run imdone.\nvar imdone = require(dir);\n\n// Get the current directory\nvar cwd = process.cwd();\nconsole.log(\"cwd:\" + cwd);\n//console.log(\"args:\" + process.argv);\n//ARCHIVE:840 We want to accept a root directory as an argument\nimdone.startFromCLI(cwd);\n\n","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone/server/util/findup.js":"/*\n * grunt\n * http://gruntjs.com/\n *\n * Copyright (c) 2012 \"Cowboy\" Ben Alman\n * Licensed under the MIT license.\n * https://github.com/gruntjs/grunt/blob/master/LICENSE-MIT\n */\n\n// Nodejs libs.\nvar path = require('path');\nvar fs = require('fs');\n// In Nodejs 0.8.0, existsSync moved from path -> fs.\nvar existsSync = fs.existsSync || path.existsSync;\n\n// Search for a filename in the given directory or all parent directories.\nmodule.exports = function findup(dirpath, filename) {\n  var filepath = path.join(dirpath, filename);\n  // Return file if found.\n  if (existsSync(filepath)) { return filepath; }\n  // If parentpath is the same as dirpath, we can't go any higher.\n  var parentpath = path.resolve(dirpath, '..');\n  return parentpath === dirpath ? null : findup(parentpath, filename);\n};\n","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone/server/config.js":"/*\n * imdone\n * https://github.com/piascikj/imdone\n *\n * Copyright (c) 2012 Jesse Piascik\n * Licensed under the MIT license.\n */\nmodule.exports = {\n  include:/^.*$/,\n  exclude:/^(node_modules|bower_components|\\.imdone|target|build|dist)\\/|\\.(git|svn)|\\~$|\\.(jpg|png|gif|swp|ttf|otf)$/,\n  marked : {\n    gfm: true,\n    tables: true,\n    breaks: false,\n    pedantic: false,\n    sanitize: true,\n    smartLists: true,\n    langPrefix: 'language-',\n  },\n  events : {\n    modified: function(params) {\n      console.log(\"Files modified in project:\", params.project.path);\n    }\n  }\n};","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone/server/errors.js":"var util = require('util');\n\nvar AbstractError = function (msg, constr) {\n  Error.captureStackTrace(this, constr || this);\n  this.message = msg || 'Error';\n};\n\nutil.inherits(AbstractError, Error);\nAbstractError.prototype.name = 'Abstract Error';\n\nmodule.exports = {\n  AbstractError: AbstractError\n};","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone/public/js/imdone-client.js":"define([\n  'underscore',\n  'jquery'\n], function(_, $) {\n  var client = {\n    moveTasks: function(reqObj) {\n      $.ajax({\n        url:\"/api/moveTasks\",\n        type:\"POST\",\n        data:JSON.stringify(reqObj),\n        contentType:\"application/json; charset=utf-8\"\n      });  \n    },\n\n    moveList: function(reqObj) {\n     $.ajax({\n        url:\"/api/moveList\",\n        type:\"POST\",\n        data:JSON.stringify(reqObj),\n        contentType:\"application/json; charset=utf-8\"\n      });\n    },\n\n    hideList: function(list, project) {\n      $.post(\"/api/hideList\", { list: list, project: project });\n    },\n\n    showList: function(list, project) {\n      $.post(\"/api/showList\", {list:list, project:project});\n    },\n\n    getKanban: function(project, success, failure) {\n      $.get(\"/api/kanban/\" + project, success, \"json\").fail(failure);      \n    },\n\n    getProjects: function(success) {\n      $.get(\"/api/projects\", success, \"json\");      \n    },\n\n    getFile: function(project, _path, line, success, failure) {\n      var url = \"/api/source/\" + project + \"?path=\" + _path;\n      if (typeof line === 'function') {\n        success = line;\n        failure = success;\n      } else {\n        url += \"&line=\" + line;\n      }\n\n      //Get the source and show the editor\n      $.ajax({\n        url: url,\n        success: success,\n        error: function(jqXHR, status, error) {\n          failure(error);\n        },\n        dataType: \"json\"\n      });\n    },\n\n    saveFile: function(project, fileObj, success) {\n      $.ajax({\n          url: \"/api/source/\" + project,\n          type: 'PUT',\n          contentType: 'application/json',\n          data: JSON.stringify(fileObj),\n          dataType: 'json',\n          success: success});\n    },\n\n    removeFile: function(project, _path, success, failure) {\n      $.ajax({\n          url: \"/api/source/\" + project + \"?path=\" + _path,\n          type: 'DELETE',\n          contentType: 'application/json',\n          dataType: 'json',\n          success: success,\n          error: failure\n      });      \n    },\n\n    getFiles: function(project, success) {\n      $.get(\"/api/files/\" + project, success);\n    },\n\n    getDirs: function(_path, cb) {\n      $.get('/api/dirs/' + _path).done(cb);\n    },\n\n    removeProject: function(project, cb) {\n      $.ajax({\n          url: \"/api/project/\" + project,\n          type: 'DELETE',\n          complete: function(data) {\n            if (data.status !== 200) {\n              cb(new Error('Error removing project'), data);\n            }\n          }\n      });      \n    },\n\n    renameList: function(project, name, newName) {\n      $.post(\"/api/renameList\", {\n        name: name,\n        newName:  newName,\n        project: project\n      });\n    },\n\n    addList: function(project, name, success) {\n      $.post(\"/api/list/\" + project + \"/\" + name, success);\n    },\n\n    removeList: function(project, name) {\n      $.post(\"/api/removeList\", {\n        list: name,\n        project: project\n      });\n    },\n\n    addProject: function(dir) {\n      $.post('/api/project/' + dir);\n    },\n\n    md: function(project, _path, cb) {\n      $.get('api/md/' + project + \"?path=\" + _path, cb);\n    },\n\n    initUpdate: function(listeners) {\n      var socket = io.connect('http://' + window.document.location.host);\n      \n      _.each(listeners, function(fn, evt) {\n        socket.on(evt, fn);\n      });\n    }\n  }\n\n  return client;\n});","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone/public/js/imdone-local.js":"define([\n  'underscore',\n  'jquery',\n  'backbone',\n  'handlebars',\n  'json2',\n  'socketio',\n  'marked',\n  'prism',\n  'store',\n  'search',\n  'client',\n  'zeroclipboard',\n  'ace',\n  'tour',\n  'keen',\n  'ace-language-tools',\n  'ace-spellcheck',\n  'jqueryui',\n  'bootstrap',\n  'printThis',\n  'pnotify',\n  'hotkeys',\n  'toc',\n  'scrollTo',\n  'wiggle'\n], function(_, $, Backbone, Handlebars, JSON, io, marked, Prism, store, Search, client, ZeroClipboard, ace, Tour, Keen) {\n\n  var imdone = window.imdone = {\n    data:{},\n    board:           $(\"#board\"),\n    listsMenu:       $(\"#lists-menu\"),\n    projectsMenu:    $(\"#projects-dropdown\"),\n    editorEl:        $(\"#editor\"),\n    editor:          ace.edit(\"editor\"),\n    editBar:         $(\".edit-bar\"),\n    boardBar:        $(\".board-bar\"),\n    fileContainer:   $(\"#file-container\"),\n    preview:         $(\"#preview\"),\n    previewContainer:$(\"#preview-container\"),\n    editBtn:         $(\"#edit-btn\"),\n    previewToggle:   $(\"#preview-toggle\"),\n    previewBtn:      $(\"#preview-btn\"),\n    printBtn:        $(\"#print-btn\"),\n    filterField:     $(\"#filter-field\"),\n    searchDialog:    $(\"#search-dialog\"),\n    searchBtn:       $(\"#search-dialog-btn\"), \n    searchForm:      $(\"#search-form\"),\n    searchField:     $(\"#search-field\"),\n    searchResults:   $(\"#search-results\"),\n    searchResultsBtn:$(\"#search-results-btn\"),\n    filename:        $('#filename'),\n    fileField:       $('#file-field'),\n    fileOpenBtn:     $('#file-open'),\n    contentNav:      $(\"#content-nav\"),\n    closeFileBtn:    $('#close-file-btn'),\n    removeFileModal: $('#remove-file-modal').modal({show:false}),\n    removeFileBtn:   $('#remove-file-btn'),\n    removeFileOkBtn: $('#remove-file-ok-btn'),\n    removeFileName:  $('#remove-file-name'),\n    closeFileModal:  $('#close-file-modal').modal({show:false, keyboard:false}),\n    closeFileOkBtn:  $('#close-file-ok-btn'),\n    closeFileCancelBtn: $('#close-file-cancel-btn'),\n    reloadFileModal:  $('#reload-file-modal').modal({show:false, keyboard:false}),\n    reloadFileOkBtn:  $('#reload-file-ok-btn'),\n    reloadFileCancelBtn: $('#reload-file-cancel-btn'),\n    nameFld:            $('#list-name-field'),\n    nameModal:          $('#list-name-modal'),\n    newListField:       $('#new-list-field'),\n    newListModal:       $('#new-list-modal'),\n    newListSave:        $('#new-list-save'),\n    openReadmeBtn:      $(\"#open-readme-btn\"),\n    archiveBtn:         $(\"#archive-btn\"),\n    filterBtn:          $(\"#filter-btn\"),\n    closeProjectBtn:    $('#close-project-btn'),\n    openProjectBtn:     $('#project-open'),\n    addProjectBtn:      $('#open-project-btn'),\n    projectNav:         $('.project-nav'),\n    showHidden:         false,\n    modes : {\n      \"md\":\"markdown\",\n      \"markdown\":\"markdown\",\n      \"js\":\"javascript\",\n      \"javascript\": \"javascript\",\n      \"html\":\"html\",\n      \"css\":\"css\",\n      \"java\":\"java\",\n      \"json\":\"json\",\n      \"coffee\":\"coffee\",\n      \"coffeescript\":\"coffee\",\n      \"joe\":\"coffee\",\n      \"php\":\"php\",\n      \"py\":\"python\",\n      \"python\":\"python\",\n      \"txt\":\"text\",\n      \"text\":\"text\"\n    },\n    Search: Search,\n    copyButton: '<button class=\"btn btn-inverse pull-right copy-btn\" title=\"Copy text\"><i class=\"icomoon-copy\"></i></button>',\n    wiggleOpts: {\n      randomStart:false,\n      limit:10\n    },\n    pathSep: (navigator.appVersion.indexOf(\"Win\")!=-1) ? \"\\\\\" : \"/\"\n  };\n  // DOING:0 Show a modal on startup that advertises chrome app and gives a poll\n  // DONE:30 Use [spin.js](http://fgnass.github.io/spin.js/#?lines=15&length=24&width=9&radius=60&corners=0.1&rotate=0&trail=60&speed=0.5&direction=1&hwaccel=on) for loading gif\n  //pnotify options\n  $.extend($.pnotify.defaults,{\n      styling: 'bootstrap',\n      history: false,\n      addclass: 'stack-bottomright',\n      stack: {\"dir1\": \"up\", \"dir2\": \"left\", \"firstpos1\": 25, \"firstpos2\": 25}\n      //stack: {\"dir1\": \"down\", \"dir2\": \"left\", \"push\": \"bottom\", \"firstpos1\": 45, \"spacing1\": 25, \"spacing2\": 25}\n  });\n\n  // Regex selector for filter\n  jQuery.expr[':'].regex = function(elem, index, match) {\n    var matchParams = match[3].split(','),\n        validLabels = /^(data|css):/,\n        attr = {\n            method: matchParams[0].match(validLabels) ? \n                        matchParams[0].split(':')[0] : 'attr',\n            property: matchParams.shift().replace(validLabels,'')\n        },\n        regexFlags = 'ig',\n        regex = new RegExp(matchParams.join('').replace(/^\\s+|\\s+$/g,''), regexFlags);\n    return regex.test(jQuery(elem)[attr.method](attr.property));\n  };\n\n  // marked options\n  marked.setOptions({\n    gfm: true,\n    tables: true,\n    breaks: false,\n    pedantic: false,\n    sanitize: true,\n    smartLists: true,\n    langPrefix: 'language-',\n  });\n\n  // ZeroClipboard options\n  ZeroClipboard.config({ moviePath: \"/lib/zeroclipboard/swf/ZeroClipboard.swf\" });\n\n  // Handlebars helpers\n  Handlebars.registerHelper('markDown', function(md) {\n    return imdone.md(md);\n  });\n\n  Handlebars.registerHelper('concat', function(data, len) {\n    if (data.length > len) return data.substring(0,len-3)+\"...\";\n    return data;\n  });\n\n  imdone.lsTemplate = Handlebars.compile($(\"#files-template\").html());\n  imdone.dirsTemplate = Handlebars.compile($(\"#dirs-template\").html());\n\n  // #TODO:60 Replace format with _.template \n  String.prototype.format = function (col) {\n    col = typeof col === 'object' ? col : Array.prototype.slice.call(arguments, 1);\n\n    return this.replace(/\\{\\{|\\}\\}|\\{(\\w+)\\}/g, function (m, n) {\n        if (m == \"{{\") { return \"{\"; }\n        if (m == \"}}\") { return \"}\"; }\n        return col[n];\n    });\n  };\n  \n  String.prototype.tokenize = function() {\n    var args = arguments;\n    var result = this;\n    \n    if (args.length > 0) {\n      for(var i=0; i<args.length; i++) {\n        result = result.replace(/\\{\\}/, args[i]);\n      }   \n    }\n    \n    return result;\n  };\n  \n  // Convert markdown to html **This could be sourced from the server to DRY it up**\n  imdone.md = function(md) {\n    md = md || imdone.source.src;\n\n    // Find all code blocks and inline code in md files and save the start and end so we can ignore  \n    var ignore = [];\n    var re = /`[\\s\\S]*?`/g, result;\n    while ((result = re.exec(md)) !== null) {\n      ignore.push([result.index, re.lastIndex]);\n    }\n    re = /`{3}[\\s\\S]*?`{3}/gm, result = null;\n    while ((result = re.exec(md)) !== null) {\n      ignore.push([result.index, re.lastIndex]);\n    }\n\n    // Replace hash style tasks but ignore code\n    md = md.replace(/#([\\w\\-]+?):(\\d+?\\.?\\d*?)\\s+(.*)/g, function(md, list, order, text, pos) {\n      if ( _.some(ignore, function(pair) { return ((pair[0] < pos) && (pos < pair[1])); }) ) return md;\n      order = (order === undefined) ? \"0\" : order;\n      return \"[{0}](#{1}:{2})\".format([text, list, order]);\n    });\n    \n    var html = marked(md);\n    // #TODO:40 everything above this should be in imdone-core Repository or File\n    var links = /(<a.*?href=\")(.*?)(\".*?)>(.*)(<\\/a>)/ig,\n        externalLinks = /^http/,\n        mailtoLinks = /^mailto/,\n        taskLinks = /^#([\\w\\-]+?):(\\d+?\\.{0,1}\\d*?)/,\n        filterLinks = /^#filter\\//,\n        inPageLinks = /^#.*$/,\n        gollumLinks = /(\\[\\[)(.*?)(\\]\\])/ig;\n    // Replace any script elements\n    html = html.replace(/<script.*?>([\\s\\S]*?)<\\/.*?script>/ig,\"$1\").replace(/(href=[\"|'].*)javascript:.*([\"|'].?>)/ig,\"$1#$2\");\n    // Make all links with http open in new tab\n    // ARCHIVE:830 For markdown files, find tasks links and give them a badge\n    // ARCHIVE:360 For internal inks, take them to the page\n    var replaceLinks = function(anchor, head, href, tail, content, end) {\n      // For links within links\n      if (new RegExp(links).test(content)) content = content.replace(links, replaceLinks);\n      var out = html;\n      // Check for external links\n      if (new RegExp(externalLinks).test(href)) {\n        out = head + href + tail + ' target=\"_blank\">' + content + end;\n      // Check for task links\n      } else if (new RegExp(taskLinks).test(href)) {\n        var list;\n        href.replace(new RegExp(taskLinks), function(href, taskList, order) {\n          list = taskList;\n          out = href;\n        });\n        var template = '{1}{2}{3} class=\"task-link\" data-list=\"{0}\"> <span class=\"task-content\">{4}</span>' +\n                       '<span class=\"label label-info task-label\">{0}</span>{5}';\n        \n        out = (template).format([list,head,href,tail,content,end]);\n      // Check for filter links\n      } else if (new RegExp(filterLinks).test(href)) {\n        var filterBy = href.split(\"/\")[1];\n        out = head + href + tail + ' title=\"Filter by ' + filterBy + '\">' + content + end;   \n      // Check for mailto links\n      } else if (new RegExp(mailtoLinks).test(href) || mailtoLinks.test($('<div />').html(href).text())) {\n        out = anchor;\n      // If not an in page link then it must be a link to a file\n      } else if (!(new RegExp(inPageLinks).test(href))) {\n        if (/.*\\.md$/.test(href)) preview = true;\n        out = head + imdone.getFileHref(imdone.currentProjectId(),href,preview) + tail + '>' + content + end;\n      }\n\n      return out;\n    };\n\n    html = html.replace(new RegExp(links), replaceLinks);\n\n    // Replace all gollum links\n    html = html.replace(new RegExp(gollumLinks), function(link, open, name, close) {\n      var file = name;\n      if (/\\|/.test(name)) {\n        var pieces = name.split(\"|\");\n        file = pieces[1];\n        name = pieces[0];\n      }\n      file = file.replace(/(\\s)|(\\/)/g,\"-\") + \".md\";\n      var href = imdone.getFileHref(file,true);\n      return '<a href=\"{}\">{}</a>'.tokenize(href, name);\n    });\n    return html;\n  };\n\n  $(document).on('click', 'a.task-link', function(evt) {\n    var $el = $(evt.target);\n    imdone.scrollToTask = $el.text();\n    imdone.scrollToList = $el.attr('data-list') || $el.closest('a.task-link').attr('data-list');\n    imdone.navigateToCurrentProject();\n    evt.preventDefault();\n    evt.stopPropagation();\n  });\n  \n  imdone.getFileHref = function(path, line, preview) {\n    if (_.isObject(preview)) preview = undefined;\n    if (_.isObject(line)) line = undefined;\n    if (line && isNaN(line)) preview = true;\n    project = imdone.currentProjectId();\n    path = encodeURIComponent(path);\n    var href = '#file/{}/{}'.tokenize(project, path);\n    if (line) href+= (\"/\" + line);\n    if (preview) href += \"/true\";\n    return href;\n  };\n\n  imdone.getSearchHref = function(project,query,offset,limit) {\n    var href = \"#search/{}/{}/{}\".tokenize(encodeURIComponent(project),encodeURIComponent(query),offset);\n    if (limit) href += (\"/\"+limit);\n    return href;\n  };\n\n  Handlebars.registerHelper('fileHref', imdone.getFileHref);\n\n  Handlebars.registerHelper('highlightCode', function(text, keyword) {\n    text = Handlebars.Utils.escapeExpression(text);\n    var regex = new RegExp('^(.*)(' + keyword + ')(.*)$', 'i');\n    var result = text.replace(regex, '<code>$1</code><code class=\"highlight\">$2</code><code>$3</code>');\n\n    return new Handlebars.SafeString(result);\n  });\n\n  //#TODO:70 Take a look at this <https://speakerdeck.com/ammeep/unsuck-your-backbone>, <http://amy.palamounta.in/2013/04/12/unsuck-your-backbone/>\n  \n  imdone.setProjectData = function(project, data) {\n    imdone.data[project] = data;\n    imdone.data.cwd = project;\n  };\n\n  imdone.currentProjectId = function(projectId) {\n    if (projectId) imdone.data.cwd = projectId;\n    return imdone.data.cwd;\n  };\n\n  imdone.currentProject = function() {\n    return imdone.data[imdone.currentProjectId()];\n  };\n\n  imdone.currentListNames = function() {\n    return _.pluck(imdone.currentProject().lists, \"name\");\n  };\n\n  imdone.isListHidden = function(list) {\n    return _.findWhere(imdone.currentProject().lists, {name:list}).hidden;\n  };\n\n  imdone.isMD = function(file) {\n    if (file) {\n      if (/\\.md$/i.test(file)) return true;\n      else return false;\n    }\n\n    if (imdone.source && /^(md|markdown)$/i.test(imdone.source.lang)) return true;\n\n    return false;\n  };\n\n  // PLANNING:90 add notify and undo for move\n  imdone.moveTasks = function(opts) {\n    var tasks = [];\n    var toListId = (opts.to) ? opts.to : opts.item.closest(\".list\").attr(\"id\");\n    var pos = (opts.pos !== undefined) ? opts.pos : opts.item.index()-1;\n    imdone.selectedTasks.each(function() {\n      //var $el = ($(this) == ui.item) ? ui.item : $(this);\n      var $el = $(this);\n      var taskId = $el.attr(\"data-id\");\n      var listId = $el.attr(\"data-list\");\n      var path = $el.attr(\"data-path\");\n      var list = _.findWhere(imdone.currentProject().lists, {name:listId});\n      var task = _.filter(list.tasks, function(task) {\n        return task.id == parseInt(taskId, 10) && task.source.path == path;\n      })[0];\n      tasks.push(task);\n    });\n    var reqObj = {\n      tasks:tasks,\n      newList:toListId,\n      newPos:pos,\n      project:imdone.currentProjectId()\n    };\n\n    //Now call the service and call getKanban\n    client.moveTasks(reqObj);\n  };\n\n  imdone.moveTask = function(item) {\n    var taskId = item.attr(\"data-id\");\n    var listId = item.attr(\"data-list\");\n    var path = item.attr(\"data-path\");\n    var toListId = item.closest(\".list\").attr(\"id\");\n    var list = _.findWhere(imdone.currentProject().lists, {name:listId});\n    var tasks = _.filter(list.tasks, function(task) {\n      return task.id == parseInt(taskId, 10) && task.source.path == path;\n    });\n    var pos = item.index()-1;\n    var reqObj = {\n      tasks:tasks,\n      newList:toListId,\n      newPos:pos,\n      project:imdone.currentProjectId()\n    };\n\n    //Now call the service and call getKanban\n    client.moveTasks(reqObj);\n  };\n\n  imdone.moveList = function(e,ui) {\n    var name = ui.item.attr(\"data-list\");\n    var pos = ui.item.index()-1;\n    var reqObj = { name: name, pos: pos, project: imdone.currentProjectId() };\n    //Now call the service and call getKanban\n    client.moveList(reqObj);\n  };\n\n  imdone.hideList = function(list) {\n    client.hideList(list, project);\n  };\n\n  imdone.showList = function(list, cb) {\n    client.showList(list, project);\n  };\n\n  imdone.getKanban = function(params) {\n    //Clear out all elements and event handlers\n    //Load the most recent data\n    var project = params && params.project || imdone.currentProjectId();\n    if (project) {\n      client.getKanban(project, function(data) {\n        imdone.setProjectData(project,data);\n        imdone.tour.setProject(data);\n        if ((params && !params.noPaint) || params === undefined) imdone.paintKanban(data);\n\n        if (params && params.callback && _.isFunction(params.callback)) params.callback(data);\n      }, function() {\n        imdone.app.navigate('/', {trigger:true});\n      });\n    }\n  };\n\n  imdone.search = function(params) {\n    var project = params && params.project || imdone.currentProjectId();\n    if (project) {\n      var search = new imdone.Search({\n        id:project,\n        query:params.query, \n        offset:parseInt(params.offset, 10), \n        limit:(params.limit)?parseInt(params.limit, 10):undefined\n      });\n      search.fetch({success: function(model, response)  {\n          // #TODO:90 Put search in a view.  [What is a view? - Backbone.js Tutorials](http://backbonetutorials.com/what-is-a-view/)\n          var template = Handlebars.compile($(\"#search-results-template\").html());\n          var results = model.toJSON();\n          var last = results.total+results.offset;\n          var context = {project:project,results:results,last:last};\n          if (results.offset > 0) {\n            var offset = results.offset - results.opts.limit;\n            context.previous = imdone.getSearchHref(project,results.query,offset);\n          }\n\n          if (results.filesNotSearched > 0) {\n            context.next = imdone.getSearchHref(project,results.query,last);\n          }\n          imdone.searchResults.html(template(context));\n          imdone.showSearchResults();\n          if (params && params.callback && _.isFunction(params.callback)) params.callback(data);\n\n        }\n      });\n    }\n  };\n  $(document).on('click', '.pager a[href=\"#\"]', function(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    return false;\n  });\n\n  imdone.showSearchResults = function() {\n    imdone.hideAllContent();\n    imdone.searchResults.show();\n    imdone.searchResultsBtn.show()\n                           .addClass(\"active\")\n                           .attr(\"title\", \"Hide search results\");\n  };\n\n  imdone.hideSearchResults = function(show) {\n    imdone.searchResults.hide();\n    imdone.searchResultsBtn.removeClass(\"active\");\n\n    if (show) {\n      if (imdone.editMode) {\n        imdone.showEditor();\n      } else {\n        imdone.paintKanban(imdone.currentProject());\n        imdone.showBoard();\n      }\n    }\n\n    imdone.searchResultsBtn.removeClass(\"active\")\n                           .attr(\"title\", \"Show search results\");\n  };\n\n  imdone.isSearchResultsVisible = function() {\n    return imdone.searchResults.is(\":visible\");\n  };\n\n  imdone.showBoard = function() {\n    imdone.contentNav.hide();\n    imdone.boardBar.show();\n    imdone.board.show();\n  };\n\n  imdone.hideBoard = function() {\n    imdone.boardBar.hide();\n    imdone.board.hide();\n  };\n\n  imdone.getProjectStore = function() {\n    var projects = store.get('projects') || {};\n    this.projectStore = projects[this.currentProjectId()] || {};\n    \n    return this.projectStore;\n  };\n\n  imdone.saveProjectStore = function() {\n    var projects = store.get('projects') || {};\n    projects[this.currentProjectId()] = this.projectStore || {};\n    store.set('projects', projects);\n  };\n\n  imdone.filter = function(filter) {\n    $(\".task\").show();\n\n    if (_.isString(filter)) this.filterField.val(filter);\n    else filter = this.filterField.val();\n    \n    if (filter) {\n      imdone.getProjectStore().filter = filter;\n      imdone.saveProjectStore();\n      // ARCHIVE:770 Use a regex for filter and create button to filter by files of selected tasks\n      // $('.task:not([data-path*=\"{0}\"])'.format([filter])).hide();\n      $('.task').hide();\n      $('.task:regex(data-path,{0})'.format([filter])).show();\n    }\n  };\n\n  imdone.filterBySelectedTasks = function() {\n    if (imdone.selectedTasks.length > 0) {\n      var paths = [];\n      imdone.selectedTasks.each(function() {\n        var path = $(this).attr(\"data-path\");\n        if (_.indexOf(paths, path) < 0) paths.push(path);\n      });\n\n      var filter = paths.join(\"|\");\n      imdone.app.navigate('#filter/{0}'.format([filter]), true);\n    }\n  };\n\n  imdone.clearFilter = function() {\n    this.filterField.val(\"\");\n    delete this.getProjectStore().filter;\n    this.saveProjectStore();\n    $(\".task\").show();\n  };\n\n  imdone.tasksSelected = function() {\n    imdone.selectedTasks = $(\".task.selected\");\n    if (imdone.selectedTasks.length > 0) {\n      imdone.archiveBtn.show();\n      imdone.filterBtn.show();\n\n      if (imdone.tour.isCompleted(\"archiveAndFilter\")) {\n        imdone.archiveBtn.ClassyWiggle(\"start\",imdone.wiggleOpts);\n        imdone.filterBtn.ClassyWiggle(\"start\",imdone.wiggleOpts);\n      } \n      imdone.tour.start(\"archiveAndFilter\");\n    }\n    else {\n      imdone.archiveBtn.hide();\n      imdone.filterBtn.hide();\n    }\n  };\n  \n  imdone.paintKanban = function(data) {\n    if (!data.busy && !imdone.editMode) {\n      imdone.board.empty();\n      imdone.contentNav.hide();\n      imdone.projectNav.show();\n      imdone.searchResults.hide();\n\n      imdone.listsMenu.empty();\n      var template = Handlebars.compile($(\"#list-template\").html());\n      imdone.board.html(template(data));\n      template =  Handlebars.compile($(\"#lists-template\").html());\n      imdone.listsMenu.html(template(data));\n      \n      // Apply existing filter\n      var filter = imdone.getProjectStore().filter || \"\";\n      imdone.filter(filter);\n\n      // Add archiveBtn listener\n      imdone.archiveBtn.unbind().click(function() {\n        var list = \"archive\";\n        _.each(imdone.currentListNames(), function(name) {\n          if ((/archive|deleted/i).test(name)) list = name;\n        });\n        if (imdone.selectedTasks && imdone.selectedTasks.length > 0) imdone.moveTasks({pos:0, to:list});\n      });\n\n      // Add filterBtn listener\n      imdone.filterBtn.unbind().click(imdone.filterBySelectedTasks);\n\n      // Select tasks and select all\n      $(\".task-select-all\").click(function(evt) {\n          var list = $(this).attr(\"data-list\");          \n          var tasks = $(\"#\" + list + \" .task\");\n          if ($(this).hasClass(\"selected\")) {\n            $(this).removeClass(\"selected\").find(\"i\").removeClass(\"icomoon-check\").addClass(\"icomoon-check-empty\");\n            tasks.each(function() {\n              $(this).removeClass(\"selected\");\n            });\n          } else {\n            $(this).addClass(\"selected\").find(\"i\").removeClass(\"icomoon-check-empty\").addClass(\"icomoon-check\");\n            tasks.each(function() {\n              if ($(this).is(':visible')) $(this).addClass(\"selected\");\n            });\n          }\n          imdone.tasksSelected();\n       });\n\n      $('.task').mouseup(function(e) {\n        if ($(e.target).hasClass(\"source-link\") || $(e.target).attr('target') == '_blank') return;\n        var $el = $(this);\n        if (!imdone.sortingTasks) {\n          if ($el.hasClass(\"selected\")) {\n            $el.removeClass(\"selected\");\n          } else if ($el.is(':visible')) {\n            $el.addClass(\"selected\");\n          }\n          imdone.tasksSelected();\n        }\n      });\n      // Make Sortable\n      $(\".list\").sortable({\n            delay: 300,\n            items: \".task\",\n            connectWith: \".list\",\n            start: function(evt, ui) {\n              imdone.sortingTasks = true;\n              if (imdone.selectedTasks && imdone.selectedTasks.length > 0) {\n                imdone.selectedTasks.each(function() {\n                  if ($(this).attr(\"id\") != ui.item.attr(\"id\")) $(this).hide();\n                });\n              }\n            },\n            stop: function(evt, ui) {\n              imdone.sortingTasks = false;\n              if (imdone.selectedTasks && imdone.selectedTasks.length > 1) {\n                imdone.moveTasks({item:ui.item});\n              }\n              else imdone.moveTask(ui.item);\n            }\n        }).disableSelection();\n\n      imdone.listsMenu.sortable({\n        delay: 300,\n        axis: \"y\",\n        items: \".list-item\",\n        handle:\".js-drag-handle\",\n        stop: imdone.moveList\n      }).disableSelection();\n\n      //Set width of board based on number of visible lists\n      var totalLists  = _.reject(data.lists,function(list) {\n        return list.hidden;\n      }).length;\n      var width = 362*totalLists;\n      imdone.board.css('width',width + 'px');\n      imdone.boardBar.show();\n\n      if (!imdone.isSearchResultsVisible()) imdone.board.show();\n            \n      //$('.list-name-container, .list-hide, .list-show, [title]').tooltip({placement:\"bottom\"});\n\n      if (data.readme) {\n        // ARCHIVE:160 Fix readme href\n        var href = imdone.getFileHref(data.readme.path,true);\n        imdone.openReadmeBtn.attr(\"title\", \"Open \" + data.readme.path + \" file.\")\n        .show()\n        .unbind()\n        .click(function() {\n          imdone.app.navigate(href, true);\n        });\n\n        if (imdone.tour && imdone.tour.isCompleted('newProject')) imdone.openReadmeBtn.ClassyWiggle(\"start\",imdone.wiggleOpts);\n      } else {\n        imdone.openReadmeBtn.hide();\n      }\n\n      if (imdone.scrollToTask) {\n        var task = imdone.scrollToTask, list = imdone.scrollToList;\n        delete imdone.scrollToTask;\n        delete imdone.scrollToList;\n\n        var scrollToTask = function() {\n          var $task = $('.task:contains(\"{}\")'.tokenize(task));\n          if ($task.length > 0) {\n            $task.addClass('selected');\n            $('.app-container').scrollTo($task, 500);\n          }\n        };\n\n        scrollToTask();\n      }\n\n      // Check for selected tasks, there shouldn't be any, but it'll hide the buttone\n      imdone.tasksSelected();\n\n    }\n  };\n\n  imdone.getProjects = function(callback) {\n    client.getProjects(function(data){\n      imdone.projects = data;\n      if (data.length > 0) imdone.paintProjectsMenu();\n      if (_.isFunction(callback)) callback(data);\n    });\n  };\n\n  imdone.paintProjectsMenu = function() {\n    imdone.projectsMenu.empty();\n\n    var template = Handlebars.compile($(\"#projects-template\").html());\n    var context = {\n      cwd: imdone.currentProjectId(),\n      projects:_.without(imdone.projects, imdone.currentProjectId()).sort()\n    };\n    imdone.projectsMenu.html(template(context)).show();\n  };\n\n  imdone.currentFileChanged = function(data) {\n    // Check if the current file is being modified\n    if (data.mods.length > 0) {\n      var fileUpdate = _.find(data.mods, function(mod) { return mod.mod === 'file.update' });\n      if (fileUpdate && imdone.source && fileUpdate.file === imdone.source.path) {\n        client.getFile(imdone.currentProjectId(), imdone.source.path, function(data) {\n          if (data.src !== imdone.source.src) {\n            imdone.reloadFileConfirm(function(reload) {\n              if (reload) imdone.getSource({\n                path: imdone.source.path, \n                preview: imdone.previewMode,\n                line: imdone.editor.getCursorPosition().row+1\n              });\n            });\n          }\n          // #TODO:20 How do we check for deleted???\n        });\n      }\n    }\n  };\n\n  imdone.initUpdate = function() {\n    client.initUpdate({\n      'project.modified': function(data) {\n        var projectId = data.project;\n        console.log(\"Project modified: \", projectId);\n        var currentProjectId = imdone.currentProjectId();\n        if (_.indexOf(imdone.projects, projectId) < 0) return;\n        var boardHidden = !imdone.board.is(':visible');\n        // only react if project exists and is current.\n        if (projectId == currentProjectId) {\n          console.log(\"boardHidden:\", boardHidden);\n          imdone.currentFileChanged(data);\n          imdone.getKanban({\n            project:projectId, \n            noPaint:boardHidden, \n            callback:function() {\n              console.log(\"refresh of \" + projectId + \" complete!\");\n            }\n          });\n        }\n      },\n      \n      'files.processed': function(data) {\n        var pcntNum = Math.round((data.processed/data.total)*100);\n        var pcnt = pcntNum.toString() + '%';\n        var $bar = imdone.progress.find('.bar');\n        $bar.css('width', pcnt);\n      },\n      'project.initialized': function(data) {\n        // add the project and get kanban\n        var projectId = data.project;\n        console.log(\"Project initialized: \", projectId);\n        \n        setTimeout(function() {\n          imdone.progress.modal('hide');\n          imdone.progress.find('.bar').css('width', '0%');\n        }, 1000);\n\n        if (_.indexOf(imdone.projects, projectId) < 0) {\n          imdone.projects.push(projectId);\n          imdone.paintProjectsMenu();\n        }\n\n        imdone.currentProjectId(projectId);\n        imdone.navigateToCurrentProject();\n      },\n      'project.removed': function(data) {\n        var projectId = data.project;\n        console.log(\"Project removed: \", projectId);\n        // remove the project\n        imdone.projects = _.without(imdone.projects, projectId);\n        delete imdone.data[projectId];\n        // repaint the projects menu\n        imdone.paintProjectsMenu();\n\n        if (imdone.projects.length === 0) {\n          imdone.app.navigate('/', {trigger:true});\n        } else {\n          imdone.currentProjectId(imdone.projects[0]);\n          imdone.navigateToCurrentProject();\n        } \n      }\n    });\n  };\n\n  imdone.getFileHistory = function() {\n    var projectHist;\n    var hist = store.get('history');\n    if (hist && hist[imdone.currentProjectId()]) {\n      projectHist = hist[imdone.currentProjectId()];\n      projectHist.reverse();\n    }\n\n    return projectHist;\n  };\n\n  imdone.addFileToHistory = function() {\n    var projectHist;\n    var hist = store.get('history');\n    if (!hist) hist = {};\n\n    if (!hist[imdone.currentProjectId()]) hist[imdone.currentProjectId()] = [];\n\n    //remove other occurences of path\n    hist[imdone.currentProjectId()] = _.without(hist[imdone.currentProjectId()], imdone.source.path);\n    projectHist = hist[imdone.currentProjectId()];\n    projectHist.push(imdone.source.path);\n    //ARCHIVE:900 Don't pop, shift\n    if (projectHist.length > 10) projectHist.shift();\n    store.set('history', hist);\n    projectHist.reverse();\n\n    return projectHist;\n  };\n\n  imdone.addProjectToHistory = function(path) {\n    var hist = store.get('project-history');\n    if (!hist) hist = [];\n    hist = _.without(hist, path);\n    hist.unshift(path);\n    if (hist.length > 10) hist.pop();\n    store.set('project-history', hist);\n  };\n\n  imdone.getProjectHistory = function() {\n    return store.get('project-history');\n  };\n\n  imdone.removeCurrentFileFromHistory = function() {\n    var projectHist;\n    var hist = store.get('history');\n    if (!hist) return;\n\n    if (!hist[imdone.currentProjectId()]) return;\n\n    //remove other occurences of path\n    hist[imdone.currentProjectId()] = _.without(hist[imdone.currentProjectId()], imdone.source.path);\n    store.set('history', hist);\n  };\n\n  imdone.getSource = function(params) {\n    params.project = params.project || imdone.currentProjectId();\n    //ARCHIVE:880 We have to convert the source api url URL first\n    if (params && params.path) params.path = params.path.replace(/^\\/*/,'');\n    \n    imdone.previewMode = params.preview;\n    \n    client.getFile(params.project, params.path, params.line, function(data){\n        imdone.source = data;\n        imdone.currentProjectId(data.project);\n        //store the path in history\n        imdone.addFileToHistory();\n\n        //Make sure we have the right project displayed\n        imdone.paintProjectsMenu();\n        \n        //ARCHIVE:750 Update file-path on edit button\n        imdone.filename.empty().html(imdone.source.path);\n        imdone.editMode = true;\n        \n        if (imdone.isMD()) {\n          imdone.previewToggle.show();\n        } else {\n          imdone.previewToggle.hide();\n        }      \n\n        imdone.hideAllContent();\n        imdone.hideBoard();\n\n        if (imdone.isMD() && imdone.previewMode === true && imdone.source.src !== \"\") {\n          imdone.showPreview();\n        } else {\n          imdone.showEditor();\n        }\n\n      }, function(error) {\n        console.log(error);\n      });\n  };\n\n  imdone.showFileView = function() {\n    imdone.contentNav.show();\n    imdone.editBar.show();\n  };\n  \n  imdone.parseQueryString = function(queryString) {\n      var params = {};\n      if(queryString){\n          _.each(\n              _.map(decodeURI(queryString).split(/&/g),function(el,i){\n                  var aux = el.split('='), o = {};\n                  if(aux.length >= 1){\n                      var val;\n                      if(aux.length == 2)\n                          val = aux[1];\n                      o[aux[0]] = val;\n                  }\n                  return o;\n              }),\n              function(o){\n                  _.extend(params,o);\n              }\n          );\n      }\n      return params;\n  };\n\n  //print\n  imdone.print = function() {\n    var printOptions = {\n      pageTitle: imdone.source.path,\n      importCSS: false,\n      loadCSS:['/css/print-element.css']\n    };\n    if(imdone.previewMode && imdone.source.ext == \"md\") {\n      imdone.preview.printThis(printOptions);\n    } else if (imdone.editMode) {\n      $(\"<pre><code>\" + imdone.editor.getValue() + \"</code></pre>\").printThis(printOptions);\n    } else {\n      imdone.board.printThis(printOptions);\n    }\n  };\n  imdone.printBtn.on(\"click\", imdone.print);\n\n  // ARCHIVE:130 Fix markdown language mode for editor\n  //Show the editor\n  imdone.showEditor = function(e) {\n    if (e) {\n      e.stopPropagation();\n      e.preventDefault();\n    }\n    imdone.previewMode = false;\n    imdone.editBtn.addClass(\"active\");\n    imdone.previewBtn.removeClass(\"active\");\n    var data = imdone.source,\n        mode = imdone.modes[data.ext] || \"text\";\n\n    var line = parseInt(data.line, 10);\n    line = isNaN(line) ? 0 : line;\n    \n    // ARCHIVE:790 User should be able to set global ace confiuration and have it saved to config.js\n    var session = imdone.aceSession = ace.createEditSession(data.src);\n    session.setMode(\"ace/mode/\" + mode);\n    session.setUseWrapMode(true);\n    session.setWrapLimitRange(120, 160);\n    session.setOption('tabSize',2);\n    //Editor change events\n    session.on('change', function(e) {\n      if (imdone.source.src != imdone.editor.getValue()) {\n        if (!imdone.fileModified) {\n          if (imdone.fileNotify) imdone.fileNotify.pnotify_remove();\n          \n          imdone.fileModified = true;\n          imdone.fileModifiedNotify = $.pnotify({\n            title: \"File modified!\",\n            nonblock: true,\n            hide: false,\n            sticker: false,\n            type: 'warning',\n            icon: 'icomoon-exclamation-sign'\n          });                    \n        }\n      } else {\n        imdone.fileModified = false;\n        imdone.fileModifiedNotify.pnotify_remove();\n      }\n    });\n\n    imdone.editor.setSession(session);\n\n    imdone.hideAllContent();\n    imdone.showFileView();\n    imdone.editorEl.show();\n    imdone.fileContainer.show({\n        duration: 0,\n        complete: function() {\n            imdone.editor.resize(true);\n            imdone.editor.gotoLine(line);\n            imdone.editor.focus();\n            imdone.tour.start('newFile');\n        }\n    });\n  };\n  imdone.editBtn.on(\"click\", imdone.showEditor);\n\n  imdone.hideAllContent = function() {\n    imdone.previewContainer.hide();\n    imdone.fileContainer.hide();\n    imdone.contentNav.hide();\n    imdone.hideSearchResults();\n    imdone.board.hide();\n  };\n\n  //Show the markdown preview\n  imdone.showPreview = function(e) {\n    if (e) {\n      e.stopPropagation();\n      e.preventDefault();\n    }\n    if (imdone.isMD()) {\n      imdone.previewMode = true;\n      imdone.showFileView();\n      imdone.previewBtn.addClass(\"active\");\n      imdone.editBtn.removeClass(\"active\");\n      imdone.editor.blur();\n      imdone.hideAllContent();\n      imdone.contentNav.show();\n      imdone.editorEl.hide();\n      imdone.preview.empty();\n      imdone.preview.html(imdone.md());\n      imdone.fileContainer.show();\n      imdone.previewContainer.show();\n      imdone.fileContainer.focus();\n      \n      // setup the clipboard for pre elements\n      preId = 0;\n      imdone.preview.find('pre').each(function() {\n        var id = 'pre-id-' + preId;\n        var copyButton = $(imdone.copyButton);\n        copyButton.attr('data-clipboard-target', id);\n        $(this).attr('id', id);\n        $(this).before(copyButton);\n        if (!/language-/.test($(this).attr('class'))) $(this).addClass('language-none');\n        preId++;\n      });\n\n      var clip = new ZeroClipboard($('.copy-btn'));\n\n      clip.on( \"load\", function(client) {\n        client.on( \"complete\", function(client, args) {\n          $.pnotify({\n              title: \"Text copied!\",\n              nonblock: true,\n              hide: true,\n              sticker: false,\n              type: 'success'\n            });\n        });\n      });\n\n      // Highlight code\n      Prism.highlightAll();\n      \n      // T.O.C\n      $(\"#toc\").html('').toc({\n        'content':'#preview',\n        'headings': 'h1,h2'\n      });\n\n      // ARCHIVE:100 Fix scrollSpy\n      imdone.fileContainer.scrollspy('refresh');\n\n      // Add borders to tables\n      imdone.preview.find(\"table\").addClass(\"table table-bordered table-nonfluid\");\n\n    } else {\n      imdone.previewMode = false;\n    }\n  };\n\n  // ARCHIVE:90 Fix toc click\n  $(document).on('click', '#toc a', function(e) {\n    var id = $(this).attr('href');\n    imdone.fileContainer.scrollTo($(id), 500);\n    e.preventDefault();\n    e.stopPropagation();\n    return false;\n  });\n\n  imdone.previewBtn.on(\"click\", function() {\n    imdone.closeFileConfirm(imdone.showPreview);\n  });\n  imdone.fileContainer.scrollspy({ target: '#sidebar'});\n\n  //ARCHIVE:950 User should be notified when a file has been modified\n  imdone.closeFile = function() {\n      imdone.editMode = false;\n      imdone.fileModified = false;\n      imdone.previewMode = false;\n      $.pnotify_remove_all();\n      imdone.fileContainer.hide();\n      imdone.editBar.hide();\n      imdone.hideAllContent();\n      delete imdone.source;\n  };\n\n  imdone.closeFileConfirm = function(cb) {\n    imdone.closeFileOkBtn.unbind('click');\n    imdone.closeFileCancelBtn.unbind('click');\n\n    if (!imdone.fileModified) {\n      cb();\n    } else {\n      imdone.closeFileCancelBtn.click(function(e) {\n        imdone.closeFileModal.modal(\"hide\");\n        imdone.fileModified = false;\n        imdone.fileModifiedNotify.pnotify_remove();\n        cb();\n        return false;\n      });\n      imdone.closeFileOkBtn.click(function(e) {\n        imdone.closeFileModal.modal(\"hide\");\n        imdone.saveFile(cb);\n        return false;\n      });\n\n      imdone.closeFileModal.modal(\"show\");\n    } \n  };\n\n  imdone.closeFileModal.on('shown.bs.modal', function() {\n    imdone.closeFileOkBtn.focus();\n  });\n  \n  imdone.reloadFileConfirm = function(cb) {\n    imdone.reloadFileOkBtn.unbind('click');\n    imdone.reloadFileCancelBtn.unbind('click');\n\n\n    imdone.reloadFileCancelBtn.click(function(e) {\n      imdone.reloadFileModal.modal(\"hide\");\n      cb(false);\n      return false;\n    });\n    imdone.reloadFileOkBtn.click(function(e) {\n      imdone.reloadFileModal.modal(\"hide\");\n      cb(true);\n      return false;\n    });\n\n    imdone.reloadFileModal.modal(\"show\");\n  };\n\n  imdone.reloadFileModal.on('shown.bs.modal', function() {\n    imdone.reloadFileOkBtn.focus();\n  });\n\n  //Save source from editor\n  imdone.saveFile = function(evt) {\n    imdone.source.src = imdone.editor.getValue();\n    client.saveFile(imdone.currentProjectId(), imdone.source, \n      function(data) {\n          if (imdone.fileModified) {\n            imdone.fileModified = false;\n            imdone.fileModifiedNotify.pnotify_remove();\n          }\n          imdone.fileNotify = $.pnotify({\n            title: \"File saved!\",\n            nonblock: true,\n            hide: true,\n            sticker: false,\n            type: 'success',\n            icon: 'icomoon-save'\n          });\n          if (_.isFunction(evt)) evt();\n        });\n\n    return true;\n  };\n  $(document).on('click', '#save-file-btn', imdone.saveFile);\n\n  imdone.removeSourceConfirm = function() {\n    imdone.removeFileName.html(imdone.source.path);\n    imdone.removeFileModal.modal(\"show\");\n  };\n  \n  imdone.removeSource = function() {\n    client.removeFile(imdone.currentProjectId(), imdone.source.path,\n      function(data) {\n        imdone.removeCurrentFileFromHistory();\n        imdone.closeFile();\n        imdone.fileNotify = $.pnotify({\n          title: \"File deleted!\",\n          nonblock: true,\n          hide: true,\n          sticker: false,\n          type: 'success'\n        });\n        imdone.navigateToCurrentProject();\n      },\n      function(data) {\n        // PLANNING:30 Make this pnotify default for all errors!\n        imdone.fileNotify = $.pnotify({\n          title: \"Unable to delete file!\",\n          nonblock: true,\n          hide: true,\n          sticker: false,\n          type: 'error'\n        });\n      });\n  };\n  //ARCHIVE:890 Implement delete file functionality\n  imdone.removeFileBtn.on('click', function() {\n    imdone.removeSourceConfirm();\n  });\n\n  imdone.removeFileOkBtn.on('click', function() {\n    imdone.removeFileModal.modal(\"hide\");\n    imdone.removeSource();\n    return false;\n  });\n\n  imdone.removeFileModal.on('shown.bs.modal', function() {\n    $('#remove-file-cancel-btn').focus();\n  });\n\n\n  imdone.navigateToCurrentProject = function() {\n    imdone.app.navigate(\"#project/\" + imdone.currentProjectId(), {trigger:true});\n  };\n\n  imdone.navigateToFile = function(path, line, preview) {\n    imdone.app.navigate(imdone.getFileHref(path, line, preview), {trigger:true});\n  };\n\n  imdone.openFileDialog = function(e) {\n    client.getFiles(imdone.currentProjectId(), function(data) {\n      imdone.currentProject().ls = data;\n      imdone.currentProject().cwd = data;\n      data.history = imdone.getFileHistory();\n      data.history = _.map(data.history, function(path) {\n        return {path:path, project:imdone.currentProjectId(), line:null, preview:imdone.isMD(path)};\n      });\n      $('#ls').html(imdone.lsTemplate(data));\n      imdone.fileField.val(\"\");\n      var fileModal = $('#file-modal').modal({show:false});\n      fileModal.on('show.bs.modal', function() {\n        setTimeout(function() {\n          document.activeElement.blur();\n          imdone.editor.focus();\n        }, 500);\n      });\n      fileModal.modal(\"show\");\n    });\n  };\n\n  imdone.getDirs = function(_path, cb) {\n    _path = (_path === undefined) ? \"\" : _path;\n    client.getDirs(_path, cb);\n  };\n\n  imdone.paintProjectDialog = function(_path, cb) {\n    cb = (cb !== undefined) ? cb : function(){};\n    imdone.getDirs(_path,function(data) {\n      data.history = imdone.getProjectHistory();\n      $('#dirs').html(imdone.dirsTemplate(data));\n      $('#dir-field').val(data.path);\n      if (!imdone.showHidden) $('.fs-dir[data-hidden=true]').hide();\n      cb();\n    });\n  };\n\n  imdone.openProjectDialog = function(e) {\n    imdone.paintProjectDialog(\"\", function() {\n      $('#project-modal').modal();\n    });\n  };\n\n  imdone.removeProject = function(projectId) {\n    client.removeProject(projectId, function(err, data) {\n      if (err) {\n        console.log(err);\n        console.log(data);\n      }\n    });\n  };\n\n  imdone.openHelp = function(e) {\n    $.get('/help.md', function(data) {\n      var help = imdone.md(data);\n      $('#help-modal').modal({\n        keyboard: true\n      }).find('.modal-body').html(help);\n    });\n  };\n\n  imdone.newList = function(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    imdone.newListField.val(\"\");\n    imdone.newListField.attr('placeholder', \"New list name\");\n    imdone.newListModal.modal('show');\n  };\n\n  imdone.initListNameView = function() {\n    // Start the list tour\n    $('#lists-dropdown').on('shown.bs.dropdown', function() { \n      if ($('.list-item').length > 1) {\n        imdone.tour.start('moveAndHideLists');\n      }\n    });\n\n    function listNameFilter(saveFunc) {\n      return function (e) {\n        var keyCode = (e.keyCode ? e.keyCode : e.which);\n        if (keyCode === 13) return saveFunc();\n        if (!/\\w|-/i.test(String.fromCharCode(keyCode))) {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n      };\n    }\n    //Put the focus on the name field when changing list names\n    imdone.nameModal.modal({show:false});\n    imdone.nameModal.on('show.bs.modal', function() {\n      setTimeout(function() {\n        document.activeElement.blur();\n        imdone.nameFld.focus();\n      }, 500);\n    });\n\n    //listen for list name click\n    $(document).on('click','.list-name', function(e) {\n      var name = $(this).attr(\"data-list\");\n      imdone.nameModal.modal('show');\n      imdone.nameFld.val(name);\n      imdone.nameFld.attr('placeholder', name);\n      e.preventDefault();\n      e.stopPropagation();        \n    });\n    \n    imdone.nameFld.keypress(listNameFilter(saveListName));\n\n    function saveListName() {\n      var name = imdone.nameFld.attr('placeholder'),\n          newName =  imdone.nameFld.val(),\n          project = imdone.currentProjectId();\n      if (newName !== \"\") {\n        client.renameList(project, name, newName);\n      }\n\n      imdone.nameModal.modal('hide');\n    }\n\n    //Save a list name\n    $(\"#list-name-save\").click(saveListName);\n\n    imdone.newListModal.modal({show:false});\n    imdone.newListModal.on('show.bs.modal', function() {\n      setTimeout(function() {\n        document.activeElement.blur();\n        imdone.newListField.focus();\n      }, 500);\n    });\n\n    imdone.newListField.keypress(listNameFilter(saveNewList));\n\n    function saveNewList() {\n      var self = this;\n      var name = imdone.newListField.val();\n      if (name !== \"\") {\n        client.addList(imdone.currentProjectId(), name, function() {\n          imdone.newListModal.modal('hide');\n          imdone.newListField.val(\"\");\n        });\n      }\n    }\n\n    imdone.newListSave.click(saveNewList);\n\n    $(document).on('click', '.new-list', imdone.newList);    \n\n    //Remove a list\n    $(document).on('click','.remove-list', function() {\n      client.removeList(imdone.currentProjectId(), $(this).attr(\"data-list\"));\n    });\n  };\n\n  imdone.initEditor = function() {\n\n    //Editor config\n    imdone.editor.setOptions({\n      enableBasicAutocompletion: true,\n      enableSnippets: true\n    });\n\n    var langTools = ace.require(\"ace/ext/language_tools\");\n    var listsCompleter = {\n      getCompletions: function(editor, session, pos, prefix, callback) {\n        callback(null, imdone.currentProject().lists.map(function(list, i) {\n          return {name: list.name, value:list.name + \":0\", score: 10000+(i*10), meta: \"list\"};\n        }));\n      }\n    };\n\n    langTools.addCompleter(listsCompleter);\n\n    imdone.editor.setTheme(\"ace/theme/merbivore_soft\");\n    imdone.editor.setHighlightActiveLine(true);\n    imdone.editor.setPrintMarginColumn(120);\n    //ARCHIVE:800 Use Vim keyboard bindings\n    //imdone.editor.setKeyboardHandler(require(\"ace/keybinding-vim\").Vim);\n    \n    //Ace keyboard handlers\n    imdone.editor.commands.addCommand({\n      name: 'saveFile',\n      bindKey: {win: 'Ctrl-Shift-S',  mac: 'Command-Shift-S'},\n      exec: function(editor) {\n          imdone.saveFile();\n          return false;\n      },\n      readOnly: false // false if this command should not apply in readOnly mode\n    });\n\n    imdone.editor.commands.addCommand({\n      name: 'removeSource',\n      bindKey: {win: 'Ctrl-Shift-X',  mac: 'Command-Shift-X'},\n      exec: function(editor) {\n          imdone.removeSourceConfirm();\n          return false;\n      },\n      readOnly: false // false if this command should not apply in readOnly mode\n    });\n\n    imdone.editor.commands.addCommand({\n      name: 'closeFile',\n      bindKey: {win: 'Esc',  mac: 'Esc'},\n      exec: function(editor) {\n        imdone.closeFileConfirm(function() {\n          if (imdone.isMD()) {\n            imdone.showPreview();\n          } else {\n            imdone.navigateToCurrentProject();\n          }\n        });\n        return false;\n      },\n      readOnly: false // false if this command should not apply in readOnly mode\n    });\n\n    // ARCHIVE:20 This should ask for a list and order\n    imdone.editor.commands.addCommand({\n      name: 'makeTask',\n      bindKey: {win: 'Ctrl-K', mac: 'Command-K'},\n      exec: function(editor) {\n        var row = editor.getCursorPosition().row; //returns { row:n, column:n }\n        var session = editor.getSession();\n        var line = session.getLine(row);\n        var taskLine = line.replace(/(^[\\s\\W\\d\\.]*)(\\w*.*$)/i, '$1[$2](#)');\n        editor.find(line, {\n          start: {row:row, column:0}\n        });\n        editor.replace(taskLine);\n        var col = editor.getCursorPosition().column;\n        editor.moveCursorTo(row, col-1);\n        editor.clearSelection();\n      },\n      readOnly: false\n    });\n  };\n\n  imdone.initKeyHandlers = function() {\n    // keyboard handlers --------------------------------------------------------------------------------------------\n    // edit\n    $(window).bind('keydown', 'I', function(e){\n      if (imdone.previewMode && imdone.editMode) imdone.showEditor();\n\n      e.preventDefault();\n      e.stopPropagation();\n      return false;\n      \n    })\n    .bind('keydown', 'esc', function(e){\n      if (!imdone.previewMode && !imdone.editMode) imdone.clearFilter();\n      imdone.navigateToCurrentProject();\n      e.preventDefault();\n      e.stopPropagation();\n      return false;\n    })\n    // delete file\n    .bind('keydown', 'Ctrl+Shift+X', function(e) {\n      if (imdone.editMode) {\n        imdone.removeSourceConfirm();\n      }\n      e.preventDefault();\n      e.stopPropagation();\n      return false;\n    })\n    // search\n    .bind('keydown', 'Ctrl+Shift+F', function(e) {\n      imdone.searchBtn.dropdown('toggle');\n    })\n    // new list\n    .bind('keydown', 'Ctrl+Shift+L', imdone.newList)\n    // open file\n    .bind('keydown', 'Ctrl+I', imdone.openFileDialog)\n    // Add a project\n    .bind('keydown', 'Ctrl+Shift+1', imdone.openProjectDialog)\n    // Open help\n    .bind('keydown', 'Shift+/', imdone.openHelp);\n  };\n\n  // ARCHIVE:820 Clean up init before implementing backbone views\n  imdone.init = function() {\n    imdone.progress = $('.imdone-progress').modal({\n      backdrop: 'static',\n      show: false\n    });\n\n    imdone.tour = new Tour();\n\n    imdone.initListNameView();\n    imdone.initEditor();\n    imdone.initKeyHandlers();\n\n    //Get the file source for a task\n    $(document).on('click','.source-link', function(e) {\n      var list = $(this).attr(\"data-list\");\n      var order = $(this).closest('.task').attr(\"data-order\");\n      var content =  $(this).closest(\".task\").find('.task-text').html();\n      var template = '<a href=\"#{0}:{1}\" class=\"task-link\" data-list=\"{0}\"><span class=\"task-content\">{2}</span></a>';\n\n      //ARCHIVE:380 Show the current task as notification with <http://pinesframework.org/pnotify/>\n      $.pnotify({\n        title: list,\n        text: template.format([list,order,content]),\n        nonblock: false,\n        hide: false,\n        sticker: false,\n        icon: 'icomoon-tasks',\n        type: 'info'\n      });\n    });\n\n    $('#key-help-link').click(function(e) {\n      e.preventDefault();\n      imdone.openHelp();\n    });\n\n    //close the source\n    imdone.closeFileBtn.on('click', function(e) {\n      imdone.closeFileConfirm(function() {\n        imdone.navigateToCurrentProject();\n      });\n      e.preventDefault();\n      return false;\n    });\n\n    //Open or create a file\n    $(document).on('click','#open-file-btn',imdone.openFileDialog);\n\n    //Find a path in files API response node\n    function findDir(path, node) {\n      var dir,\n          node = node || imdone.currentProject().ls;\n      _.each(node.dirs, function(dirNode) {\n        if (dir) return;\n        if (path == dirNode.path) {\n          dirNode.parent = node;\n          dir = dirNode;\n        } else if (!dir) {\n          dir = findDir(path, dirNode);\n        }\n      });\n\n      return dir;\n\n    }\n\n    //respond to directory click\n    $(document).on('click','.js-dir', function() {\n      var node = findDir($(this).attr('data-path'));\n      node = node || imdone.currentProject().ls;\n      imdone.currentProject().cwd = node;\n      $('#ls').html(imdone.lsTemplate(node));\n      imdone.fileField.focus();\n      return false;\n    });\n    \n    //open a file\n    $(document).on('click','.js-file', function() {\n      $(this).closest(\".modal\").modal('hide');\n    });\n\n    \n    // PLANNING:110 Use [egdelwonk/SlidePanel](https://github.com/egdelwonk/slidepanel) for opening files and removing clutter\n    function openFile() {\n      // ARCHIVE:180 Create a new file based on path and project with call to PUT /api/source.  If get fails call saveSource first to create the file\n      var path = imdone.fileField.val();\n      if (path !== \"\") {\n        if (/^(\\/|\\\\)/.test(path)) {\n          path = path.substring(1);\n        } else {\n          path = (imdone.currentProject().cwd.path || \"\") + imdone.pathSep + path;\n          path = path.replace(/^(\\/|\\\\)+/,\"\");\n        } \n\n        imdone.app.navigate(imdone.getFileHref(path), {trigger:true});\n        $(this).closest(\".modal\").modal('hide');\n      }\n      return false;\n    }\n\n    //Open a file from file-modal\n    imdone.fileOpenBtn.on('click',openFile);\n    imdone.fileField.bind('keydown','return', openFile);\n\n    //close modal\n    $(document).on('click','.modal-close', function() {\n      $(this).closest(\".modal\").modal('hide');\n      return false;        \n    });\n\n    // Open project dialog\n    imdone.addProjectBtn.click(imdone.openProjectDialog);\n\n    // respond to project dir click\n    $(document).on('click','.fs-dir', function(e) {\n      var dir = $(this).attr('data-path');\n      imdone.paintProjectDialog(dir);\n      e.stopPropagation();\n      e.preventDefault();\n    });\n\n\n    // Open a project\n    function openProject(dir) {\n      $('#project-modal').modal('hide');\n\n      imdone.progress.find('.mdl-header').html(\"Loading project...\");\n      imdone.progress.modal('show');\n\n      client.addProject(dir);\n    };\n\n    function openProjectListener(e) {\n      var dir = $('#dir-field').val();\n      imdone.addProjectToHistory(dir);\n      openProject(dir);\n    }\n\n    imdone.openProjectBtn.click(openProjectListener);\n    $('#dir-field').bind('keydown', 'return', openProjectListener);\n\n    $(document).on('click', '.project-hist-link', function(e) {\n      e.preventDefault();\n      var dir = $(this).attr('data-path');\n      openProject(dir);\n    });\n\n    // listen for search input\n    imdone.searchForm.submit(function(event) {\n      event.preventDefault();\n      imdone.searchBtn.dropdown('toggle');\n      var dest = imdone.getSearchHref(imdone.currentProjectId(),imdone.searchField.val(),0);\n      imdone.app.navigate(dest, {trigger:true});\n      return false;\n    });\n\n    //listen for search button click\n    imdone.searchResultsBtn.click(function() {\n      if (imdone.isSearchResultsVisible()) {\n        imdone.hideSearchResults(true);\n      } else {\n        imdone.showSearchResults();\n      }\n    });\n\n    imdone.searchDialog.on(\"show.bs.dropdown\", function() {\n      imdone.searchField.val('');\n      setTimeout(function() {\n        imdone.searchField.focus();\n      }, 500);\n    });\n\n    imdone.searchField.click(function(e) {\n      e.stopPropagation();\n      return false;\n    });\n\n    //listen for filter input\n    //ARCHIVE:390 Apply filter when kanban is reloaded\n    imdone.filterField.keyup(function() {\n      imdone.filter();\n    });\n\n    $(\"#clear\").click(function() {\n      imdone.clearFilter();\n      imdone.navigateToCurrentProject();\n      return false;\n    });\n\n    // Listen for hide\n    // PLANNING:120 Show prompt if list is large before showing\n    $(document).on('click', '.list-hide, .list-show', function(e) {\n      var list = $(this).attr(\"data-list\");\n      var el = $(\"#\" + list);\n      if (el.length > 0) {\n        imdone.hideList(list);\n      } else {\n        imdone.showList(list);\n      }\n      e.stopPropagation();\n      return false;\n    });\n\n    // Listen for project close\n    imdone.closeProjectBtn.click(function(e) {\n      imdone.closeFileConfirm(function() {\n        imdone.closeFile();\n        imdone.closeProjectBtn.blur();\n        imdone.removeProject(imdone.currentProjectId());\n        imdone.searchResultsBtn.hide();\n      });\n    });\n\n    // Get projects and start listening for updates\n    imdone.initUpdate();\n\n    imdone.getProjects(function(projects) {\n      imdone.app = new AppRouter();\n      imdone.calls = 0;\n      Backbone.history.on('route', function () {\n        imdone.calls++;\n      });\n      Backbone.history.start();\n      //if (projects.length > 0) imdone.getKanban({project:projects[0]});\n      imdone.initialized = true;\n    });\n  };\n\n  var AppRouter = Backbone.Router.extend({\n      routes: {\n          \"search/:project/:query/:offset(/:limit)\": \"searchRoute\",\n          \"project/*project\": \"projectRoute\",\n          \"file/:project/:path(/:line)(/:preview)\": \"fileRoute\",\n          \"filter/*filter\" : \"filterRoute\",\n          \"*action\": \"defaultRoute\" // Backbone will try match the route above first\n        },\n      \n      keen: new Keen({\n        projectId: \"5550efecd2eaaa7efde1f138\",\n        writeKey: \"57032d04b2b29b693ef0e06aa3c7f295ead6daf33f51696b99dffdc1ad3e52898a22578b58a2f2138d370e626c497a93ecbb6629ec4dc6f7d4b34a64158121afeec493adef9a069b4385ead8861e852acd66489a049084e75dbb72e1cea5dfc0f584eac15dd91ca7a58c357656cb36eb\"\n      }),\n    \n      initialize: function() {\n        var msg = {};\n        this.addDemographics(msg, function() {\n          this.keen.addEvent(\"start\", msg, function(err, res){\n            console.log(err);\n            console.log(res);\n          });\n        }.bind(this));\n        this.doPoll();\n        console.log(\"Router initialized...\");\n        //ARCHIVE:400 Construct views and models in here!\n        // imdone.data.projects = new Projects();\n      },\n      \n      addDemographics: function(obj, cb) {\n          obj.origin = window.location.origin;\n          obj.platform = {\n            vendor: navigator.vendor,\n            language: navigator.language,\n            appVersion: navigator.appVersion,\n          };\n          navigator.geolocation.getCurrentPosition(function(pos) {\n            obj.coords = {\n              latitude: pos.coords.latitude,\n              longitude: pos.coords.longitude,\n              accuracy: pos.coords.accuracy,\n            };\n            cb();\n          }, function(err) {\n            cb();\n          }, {\n            enableHighAccuracy: true,\n            timeout: 5000,\n            maximumAge: 0\n          });\n      },\n\n      doPoll: function() {\n        if ((window.localStorage && localStorage.getItem('poll')) || !window.navigator.onLine) return;\n        var self = this;\n\n        var $pollModal = $('#poll-modal').modal({\n          keyboard: true,\n          backdrop: true\n        });\n\n        var $pollForm = $pollModal.find('form#poll');\n        var $pollWhy = $pollForm.find('input[type=radio][name=why]');\n        var $pollHow = $pollForm.find('input[type=radio][name=how]');\n\n        var trackPoll = function() {\n          if (window.localStorage && window.navigator.onLine) {\n            var pollData = {};\n            pollData.why = $($pollWhy.selector + ':checked').val();\n            pollData.how = $($pollHow.selector + ':checked').val();\n            var email = $pollForm.find('#email').val();\n            if (\"\" !== email) pollData.email = email;\n            if (pollData.why === \"other\") {\n              pollData.whyDesc = $pollForm.find('#why-description').val();\n            }\n\n            self.addDemographics(pollData, function() {\n              if (!window.navigator.onLine) return;\n              self.keen.addEvent(\"poll-1\", pollData, function(err, res){\n                if (!err) {\n                  localStorage.setItem('poll', 'done');\n                }\n              });\n            });\n          }\n        };\n\n        $pollWhy.change(function() {\n          if ($(this).attr('id') === \"why-other\") $pollModal.find('#why-desc-wrapper').slideDown();\n          else $pollModal.find('#why-desc-wrapper').slideUp();\n        });\n\n        $pollForm.submit(function(evt) {\n          evt.preventDefault();\n          $pollModal.modal('hide');\n          trackPoll();\n          return false;\n        });\n      },\n\n      filterRoute: function(filter) {\n        this.lastRoute = \"filter\";\n        imdone.filter(filter);\n\n        if (!imdone.currentProject()) {\n          this.defaultRoute(filter);\n        }\n      },\n\n      changeProject: function(project) {\n        console.log(\"Switching to project:\", project);\n        imdone.currentProjectId(project);\n        imdone.closeFile();\n        imdone.hideSearchResults();\n        if (imdone.scrollToList && imdone.isListHidden(imdone.scrollToList)) {\n          imdone.showBoard();\n          imdone.showList(imdone.scrollToList, imdone.paintProjectsMenu);\n        } else {\n          imdone.getKanban({\n            project:project, \n            noPaint:true, \n            callback: function(project) {\n                        imdone.searchResultsBtn.hide();\n                        imdone.paintProjectsMenu();\n                        imdone.paintKanban(project);\n                        if (project && project.lists && project.lists.length < 1) {\n                          imdone.tour.start('newProject');\n                        } else if (project.lists.length > 0) {\n                          imdone.tour.start('moveTasks');\n                        }\n                      } \n          });\n        }\n        $(document).attr(\"title\", \"iMDone - \" + project);\n      },\n\n      projectRoute: function(project) {\n        this.lastRoute = \"project\";\n        var self = this;\n        if (imdone.fileModified) imdone.closeFileConfirm(function() { self.changeProject(project); });\n        else self.changeProject(project);\n      },\n\n      changeFile: function(params) {\n        if (!imdone.currentProject()) {\n          imdone.getKanban({project:params.project, noPaint:true, callback:function() {\n            imdone.projectNav.show();\n            imdone.getSource(params);\n          }});\n        } else {\n          //Get the source and show the editor\n          imdone.getSource(params);\n        }\n        $(document).attr(\"title\", \"iMDone - \" + params.project + \"/\" + params.path);\n      },\n\n      fileRoute: function(project, path, line, preview) {\n        this.lastRoute = \"file\";\n        var self = this;\n        if (_.isNull(preview)) {\n          if ((/true/i).test(line)) preview = true, line = null;\n          else preview = false;\n        }\n\n        var opts = {project:project, path:path, line:line, preview:preview};\n        if (imdone.fileModified) imdone.closeFileConfirm(function() { self.changeFile(opts); });\n        else self.changeFile(opts);\n      },\n\n      searchRoute: function(project, query, offset, limit) {\n       this.lastRoute = \"search\";\n       var params = {project:project, query:query, offset:offset, limit:limit};\n        if (!imdone.currentProject()) {\n          imdone.getKanban({project:project, noPaint:true, callback:function() {\n            imdone.paintProjectsMenu();\n            imdone.search(params);\n          }});\n        } else {\n          imdone.search(params);\n        }\n        $(document).attr(\"title\", \"iMDone - \" + params.project + \" Find: \" + params.query);\n      },\n\n      defaultRoute: function(action) {\n        if (imdone.projects.length > 0) {\n          imdone.currentProjectId(imdone.projects[0]);\n          imdone.navigateToCurrentProject();\n        } else {\n          imdone.projectNav.hide();\n          imdone.hideBoard();\n          imdone.tour.start(\"newInstall\");\n        }\n      },\n  });\n\n  return imdone;\n});\n","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone/public/js/imdone-tour.js":"define([\n  'underscore',\n  'jquery',\n  'introjs',\n  'store'\n], function(_, $, introJs, store) {\n\n  $(document).on('click', '.introjs-nextbutton, .introjs-prevbutton, .introjs-skipbutton', function(e){\n    e.stopPropagation(); // This replace if conditional.\n  });\n\n  function defaultTour(name, steps, done, opts) {\n    var self = this;\n    var intro   = introJs(),\n        project = this.project;\n    opts = opts ? opts : {};\n    opts = _.extend({\n      steps: steps,\n      showStepNumbers: false,\n      showBullets: false,\n      overlayOpacity: .5,\n      tooltipClass: 'span5'\n    }, opts);\n\n    intro.setOptions(opts);\n\n    intro.onexit(done);\n    intro.oncomplete(done);\n    intro.start();\n  }\n\n  var _tours = {\n    moveAndHideLists: function(name, done) {\n      var steps = [\n        { element: '.icomoon-eye-close, .icomoon-eye-open',\n          intro: \"Click here to hide/show a list...\"\n        },\n        {\n          element: '.icomoon-reorder',\n          intro: \"or change it's position by dragging this up or down.\"\n        }\n      ];\n\n      defaultTour.call(this, name, steps, done, { tooltipClass: 'span3'});\n    },\n\n    archiveAndFilter: function(name, done) {\n      var steps = [\n        { element: '#archive-btn',\n          intro: \"You can put tasks in a hidden archive list by clicking here...\"\n        },\n        {\n          element: '#filter-btn',\n          intro: \"or filter by the selected task's filenames by clicking here.\"\n        }\n      ];\n\n      defaultTour.call(this, name, steps, done);\n    },\n\n    moveTasks: function(name, done) {\n      var steps = [\n        { element: '.task',\n          intro: \"Move tasks by dragging and dropping them into a new position in the same list or another list...\"\n        },\n        {\n          element: '.task-select-all',\n          intro: \"or select all tasks and deselect some by clicking on them and then drag them all\"\n        },\n        { element: '.list-name',\n          intro: \"You can also rename a list by clicking on it's name.\"\n        }\n      ];      \n      \n      defaultTour.call(this, name, steps, done);\n    },\n\n    newInstall: function(name, done) {\n      var steps = [\n        {\n          intro: \"<h3>Welcome to iMDone!</h3>Let's get you started by adding a project.\"\n        },\n        {\n          element: '#open-project-btn',\n          intro: \"Open a project by clicking here and selecting a directory.<br>Be careful!  I can't open more than 10,000 files\"\n        }\n      ];      \n\n      defaultTour.call(this, name, steps, done);\n    },\n\n    newFile: function(name, done) {\n      var steps = [\n        {\n          intro: 'Create a task by typing something like<br><br><pre>[Learn more about iMDone](#doing:0)</pre>'\n        },\n        { \n          intro: 'then save the file by pressing the &lt;Esc&gt; key.'\n        }\n      ];\n\n      defaultTour.call(this, name, steps, done, {\n        onbeforechange:function(el) {\n          $('.introjs-tooltip').css('min-width','420px');\n        }\n      });\n    },\n\n    newProject: function(name, done) {\n      var self = this;\n      var intro   = introJs(),\n          project = this.project,\n          steps = [\n            {\n              element: '#open-file-btn',\n              intro: 'To get started, create a file and add tasks...'\n            },\n            {\n              element: '#lists-btn',\n              intro: 'or create a list'\n            }\n          ];\n\n      if (project.readme) {\n        steps.unshift({\n          element: '#open-readme-btn',\n          intro: 'To get started open your readme file and create tasks...'\n        });\n        steps[1].intro = 'or create a file and add tasks';\n      }\n\n      intro.setOptions({\n        steps: steps,\n        showStepNumbers: false,\n        overlayOpacity: .5\n      });\n\n      var $lastBtn;\n      function cleanup(completed) {\n        $lastBtn.ClassyWiggle(\"stop\");\n        done(completed);\n      }\n\n      intro.onbeforechange(function(el) {\n        // ARCHIVE:80 fix error in intro.js on line 557 when showStepNumbers is false and introduce overlay option\n        var $btn = $(el);\n        if ($lastBtn) cleanup();\n        $lastBtn = $btn; \n        $btn.ClassyWiggle(\"start\",{\n          randomStart:false\n        });\n      });\n      intro.onexit(function() {\n        cleanup(false);\n      });\n      intro.oncomplete(cleanup);\n      intro.start();\n    }\n  };\n\n  function Tour(project) {\n    var self = this;\n    this.project = project;\n    this.tours = [];\n\n    // Get the start functions\n    _.each(_tours, function(fn, name) {\n      self.tours.push({\n        name: name,\n        start: fn\n      });\n    });\n  }\n\n  Tour.prototype.setProject = function(project) {\n    this.project = project;\n    return this;\n  };\n\n  Tour.prototype.getTours = function() {\n    return _.pluck(this.tours, \"name\");\n  };\n\n  Tour.prototype.start = function(name, force) {\n    var $active = $(\"*:focus\");\n    var tour = _.findWhere(this.tours, {name:name});\n    var self = this;\n    if (tour) {\n      if (!force && this.isCompleted(name)) return;\n      tour.start.call(this, name, function(dontComplete) {\n        $active.focus();\n        if (!dontComplete) self.setCompleted(name);\n      });\n    }\n    return this;\n  };\n\n  Tour.prototype.setCompleted = function(name, completed) {\n    if (completed === undefined) completed = true;\n    var key = 'tours-' + name;\n    var tour = store.set(key, { completed: completed });\n    return tour.completed;\n  };\n\n  Tour.prototype.isCompleted = function(name) {\n    var key = 'tours-' + name;\n    var tour = store.get(key);\n    if (tour === undefined) return false;\n    return tour.completed;\n  };\n\n  return Tour;\n});","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone/public/js/jquery.hotkeys.js":"/*\n * jQuery Hotkeys Plugin\n * Copyright 2010, John Resig\n * Dual licensed under the MIT or GPL Version 2 licenses.\n *\n * Based upon the plugin by Tzury Bar Yochay:\n * http://github.com/tzuryby/hotkeys\n *\n * Original idea by:\n * Binny V A, http://www.openjs.com/scripts/events/keyboard_shortcuts/\n*/\n\n(function(jQuery){\n\t\n\tjQuery.hotkeys = {\n\t\tversion: \"0.8\",\n\n\t\tspecialKeys: {\n\t\t\t8: \"backspace\", 9: \"tab\", 13: \"return\", 16: \"shift\", 17: \"ctrl\", 18: \"alt\", 19: \"pause\",\n\t\t\t20: \"capslock\", 27: \"esc\", 32: \"space\", 33: \"pageup\", 34: \"pagedown\", 35: \"end\", 36: \"home\",\n\t\t\t37: \"left\", 38: \"up\", 39: \"right\", 40: \"down\", 45: \"insert\", 46: \"del\", \n\t\t\t96: \"0\", 97: \"1\", 98: \"2\", 99: \"3\", 100: \"4\", 101: \"5\", 102: \"6\", 103: \"7\",\n\t\t\t104: \"8\", 105: \"9\", 106: \"*\", 107: \"+\", 109: \"-\", 110: \".\", 111 : \"/\", \n\t\t\t112: \"f1\", 113: \"f2\", 114: \"f3\", 115: \"f4\", 116: \"f5\", 117: \"f6\", 118: \"f7\", 119: \"f8\", \n\t\t\t120: \"f9\", 121: \"f10\", 122: \"f11\", 123: \"f12\", 144: \"numlock\", 145: \"scroll\", 191: \"/\", 224: \"meta\"\n\t\t},\n\t\n\t\tshiftNums: {\n\t\t\t\"`\": \"~\", \"1\": \"!\", \"2\": \"@\", \"3\": \"#\", \"4\": \"$\", \"5\": \"%\", \"6\": \"^\", \"7\": \"&\", \n\t\t\t\"8\": \"*\", \"9\": \"(\", \"0\": \")\", \"-\": \"_\", \"=\": \"+\", \";\": \": \", \"'\": \"\\\"\", \",\": \"<\", \n\t\t\t\".\": \">\",  \"/\": \"?\",  \"\\\\\": \"|\"\n\t\t}\n\t};\n\n\tfunction keyHandler( handleObj ) {\n\t\t// Only care when a possible input has been specified\n\t\tif ( typeof handleObj.data !== \"string\" ) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar origHandler = handleObj.handler,\n\t\t\tkeys = handleObj.data.toLowerCase().split(\" \"),\n\t\t\ttextAcceptingInputTypes = [\"text\", \"password\", \"number\", \"email\", \"url\", \"range\", \"date\", \"month\", \"week\", \"time\", \"datetime\", \"datetime-local\", \"search\", \"color\"];\n\t\n\t\thandleObj.handler = function( event ) {\n\t\t\t// Don't fire in text-accepting inputs that we didn't directly bind to\n\t\t\tif ( this !== event.target && (/textarea|select/i.test( event.target.nodeName ) ||\n\t\t\t\tjQuery.inArray(event.target.type, textAcceptingInputTypes) > -1 ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Keypress represents characters, not special keys\n\t\t\tvar special = event.type !== \"keypress\" && jQuery.hotkeys.specialKeys[ event.which ],\n\t\t\t\tcharacter = String.fromCharCode( event.which ).toLowerCase(),\n\t\t\t\tkey, modif = \"\", possible = {};\n\n\t\t\t// check combinations (alt|ctrl|shift+anything)\n\t\t\tif ( event.altKey && special !== \"alt\" ) {\n\t\t\t\tmodif += \"alt+\";\n\t\t\t}\n\n\t\t\tif ( event.ctrlKey && special !== \"ctrl\" ) {\n\t\t\t\tmodif += \"ctrl+\";\n\t\t\t}\n\t\t\t\n\t\t\t// #TODO:50 Need to make sure this works consistently across platforms\n\t\t\tif ( event.metaKey && !event.ctrlKey && special !== \"meta\" ) {\n\t\t\t\tmodif += \"meta+\";\n\t\t\t}\n\n\t\t\tif ( event.shiftKey && special !== \"shift\" ) {\n\t\t\t\tmodif += \"shift+\";\n\t\t\t}\n\n\t\t\tif ( special ) {\n\t\t\t\tpossible[ modif + special ] = true;\n\n\t\t\t} else {\n\t\t\t\tpossible[ modif + character ] = true;\n\t\t\t\tpossible[ modif + jQuery.hotkeys.shiftNums[ character ] ] = true;\n\n\t\t\t\t// \"$\" can be triggered as \"Shift+4\" or \"Shift+$\" or just \"$\"\n\t\t\t\tif ( modif === \"shift+\" ) {\n\t\t\t\t\tpossible[ jQuery.hotkeys.shiftNums[ character ] ] = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = keys.length; i < l; i++ ) {\n\t\t\t\tif ( possible[ keys[i] ] ) {\n\t\t\t\t\treturn origHandler.apply( this, arguments );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tjQuery.each([ \"keydown\", \"keyup\", \"keypress\" ], function() {\n\t\tjQuery.event.special[ this ] = { add: keyHandler };\n\t});\n\n})( jQuery );","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone/public/js/jquery.sortable.js":"/*\n * HTML5 Sortable jQuery Plugin\n * http://farhadi.ir/projects/html5sortable\n * \n * Copyright 2012, Ali Farhadi\n * Released under the MIT license.\n */\n(function($) {\nvar dragging, placeholders = $();\n$.fn.sortable = function(options) {\n\tvar method = String(options);\n\toptions = $.extend({\n\t\tconnectWith: false\n\t}, options);\n\treturn this.each(function() {\n\t\tif (/^enable|disable|destroy$/.test(method)) {\n\t\t\tvar items = $(this).children($(this).data('items')).attr('draggable', method == 'enable');\n\t\t\tif (method == 'destroy') {\n\t\t\t\titems.add(this).removeData('connectWith items')\n\t\t\t\t\t.off('dragstart.h5s dragend.h5s selectstart.h5s dragover.h5s dragenter.h5s drop.h5s');\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tvar isHandle, index, items = $(this).children(options.items);\n\t\tvar placeholder = $('<' + (/^ul|ol$/i.test(this.tagName) ? 'li' : 'div') + ' class=\"sortable-placeholder\">');\n\t\titems.find(options.handle).mousedown(function() {\n\t\t\tisHandle = true;\n\t\t}).mouseup(function() {\n\t\t\tisHandle = false;\n\t\t});\n\t\t$(this).data('items', options.items)\n\t\tplaceholders = placeholders.add(placeholder);\n\t\tif (options.connectWith) {\n\t\t\t$(options.connectWith).add(this).data('connectWith', options.connectWith);\n\t\t}\n\t\titems.attr('draggable', 'true').on('dragstart.h5s', function(e) {\n\t\t\tif (options.handle && !isHandle) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tisHandle = false;\n\t\t\tvar dt = e.originalEvent.dataTransfer;\n\t\t\tdt.effectAllowed = 'move';\n\t\t\tdt.setData('Text', 'dummy');\n\t\t\tindex = (dragging = $(this)).addClass('sortable-dragging').index();\n\t\t}).on('dragend.h5s', function() {\n\t\t\tif (!dragging) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragging.removeClass('sortable-dragging').show();\n\t\t\tplaceholders.detach();\n\t\t\tif (index != dragging.index()) {\n\t\t\t\tdragging.parent().trigger('sortupdate', {item: dragging});\n\t\t\t}\n\t\t\tdragging = null;\n\t\t}).not('a[href], img').on('selectstart.h5s', function() {\n\t\t\tthis.dragDrop && this.dragDrop();\n\t\t\treturn false;\n\t\t}).end().add([this, placeholder]).on('dragover.h5s dragenter.h5s drop.h5s', function(e) {\n\t\t\tif (!items.is(dragging) && options.connectWith !== $(dragging).parent().data('connectWith')) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (e.type == 'drop') {\n\t\t\t\te.stopPropagation();\n\t\t\t\tplaceholders.filter(':visible').after(dragging);\n\t\t\t\tdragging.trigger('dragend.h5s');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\te.preventDefault();\n\t\t\te.originalEvent.dataTransfer.dropEffect = 'move';\n\t\t\tif (items.is(this)) {\n\t\t\t\tif (options.forcePlaceholderSize) {\n\t\t\t\t\tplaceholder.height(dragging.outerHeight());\n\t\t\t\t}\n\t\t\t\tdragging.hide();\n\t\t\t\t$(this)[placeholder.index() < $(this).index() ? 'after' : 'before'](placeholder);\n\t\t\t\tplaceholders.not(placeholder).detach();\n\t\t\t} else if (!placeholders.is(this) && !$(this).children(options.items).length) {\n\t\t\t\tplaceholders.detach();\n\t\t\t\t$(this).append(placeholder);\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t});\n};\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-imdone/node_modules/imdone/public/js/main.js":"requirejs.config({\n  baseUrl: 'lib',\n\n  // #DONE:20 Put paths in lib\n  paths: {\n    underscore:\"underscore/underscore\",\n    json2:'json2/json2',\n    backbone:'backbone/backbone',\n    bootstrap: 'bootstrap/js/bootstrap.min',\n    jquery:\"jquery/jquery.min\",\n    jqueryui: '/js/jquery-ui-1.9.2.custom.min',\n    handlebars: 'handlebars/handlebars',\n    socketio:'/socket.io/socket.io',\n    hotkeys:'/js/jquery.hotkeys',\n    marked:'marked/marked',\n    ace:'ace-builds/ace',\n    'ace-language-tools':'ace-builds/ext-language_tools',\n    'ace-spellcheck':'ace-builds/ext-spellcheck',\n    pnotify:'/js/jquery.pnotify.min',\n    store:'/js/store.min',\n    prism:'prism/js/prism',\n    toc:'jquery.toc/jquery.toc',\n    app:'/js/imdone-local',\n    tour:'/js/imdone-tour',\n    search:'/js/models/search',\n    client:'/js/imdone-client',\n    scrollTo: \"jquery.scrollTo/jquery.scrollTo\",\n    zeroclipboard: 'zeroclipboard/js/ZeroClipboard',\n    wiggle: '/js/jquery.classywiggle.min',\n    printThis: 'printThis/printThis',\n    introjs: 'intro.js/js/intro',\n    keen: 'keen-js/keen.min'\n  },\n\n  shim: {\n    'underscore': {\n      exports: '_'\n    },\n    'backbone': {\n      deps: ['jquery', 'json2', 'underscore'],\n      exports: 'Backbone'\n    },\n    'jqueryui': {\n      deps: ['jquery']\n    },\n    'bootstrap': {\n      deps: ['jquery']\n    },\n    'handlebars': {\n      deps: ['jquery'],\n      exports: 'Handlebars'\n    },\n    'json2': {\n      exports: 'JSON'\n    },\n    'marked': {\n      deps: ['jquery'],\n      exports: 'marked'\n    },\n    'printThis': {\n      deps: ['jquery']\n    },\n    'pnotify': {\n      deps: ['jquery','bootstrap']\n    },\n    'hotkeys': {\n      deps: ['jquery']\n    },\n    'prism':{\n      exports: 'Prism'\n    },\n    'toc': {\n      deps: ['jquery']\n    },\n    'scrollTo': {\n      deps: ['jquery']\n    },\n    'zeroclipboard': {\n      deps: ['jquery']\n    },\n    'wiggle': {\n      deps: ['jquery']\n    },\n    'ace': {\n      exports: 'ace'\n    },\n    'ace-language-tools': {\n      deps: ['ace']\n    },\n    'ace-spellcheck': {\n      deps: ['ace']\n    }\n  }\n});\n\nrequire(['app', 'ace'],function(App, ace) {\n  App.init();\n});"}